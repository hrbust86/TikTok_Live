// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: webcast.proto

package tiktok_hack

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// @BarrageType
// webcast.im.BarrageMessage
type WebcastBarrageMessage_BarrageType int32

const (
	WebcastBarrageMessage_UNKNOWN                       WebcastBarrageMessage_BarrageType = 0
	WebcastBarrageMessage_ECOMORDERING                  WebcastBarrageMessage_BarrageType = 1
	WebcastBarrageMessage_ECOMBUYING                    WebcastBarrageMessage_BarrageType = 2
	WebcastBarrageMessage_NORMAL                        WebcastBarrageMessage_BarrageType = 3
	WebcastBarrageMessage_SUBSCRIBE                     WebcastBarrageMessage_BarrageType = 4
	WebcastBarrageMessage_EVENTVIEW                     WebcastBarrageMessage_BarrageType = 5
	WebcastBarrageMessage_EVENTREGISTERED               WebcastBarrageMessage_BarrageType = 6
	WebcastBarrageMessage_SUBSCRIBEGIFT                 WebcastBarrageMessage_BarrageType = 7
	WebcastBarrageMessage_USERUPGRADE                   WebcastBarrageMessage_BarrageType = 8
	WebcastBarrageMessage_GRADEUSERENTRANCENOTIFICATION WebcastBarrageMessage_BarrageType = 9
	WebcastBarrageMessage_FANSLEVELUPGRADE              WebcastBarrageMessage_BarrageType = 10
	WebcastBarrageMessage_FANSLEVELENTRANCE             WebcastBarrageMessage_BarrageType = 11
	WebcastBarrageMessage_GAMEPARTNERSHIP               WebcastBarrageMessage_BarrageType = 12
)

// Enum value maps for WebcastBarrageMessage_BarrageType.
var (
	WebcastBarrageMessage_BarrageType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "ECOMORDERING",
		2:  "ECOMBUYING",
		3:  "NORMAL",
		4:  "SUBSCRIBE",
		5:  "EVENTVIEW",
		6:  "EVENTREGISTERED",
		7:  "SUBSCRIBEGIFT",
		8:  "USERUPGRADE",
		9:  "GRADEUSERENTRANCENOTIFICATION",
		10: "FANSLEVELUPGRADE",
		11: "FANSLEVELENTRANCE",
		12: "GAMEPARTNERSHIP",
	}
	WebcastBarrageMessage_BarrageType_value = map[string]int32{
		"UNKNOWN":                       0,
		"ECOMORDERING":                  1,
		"ECOMBUYING":                    2,
		"NORMAL":                        3,
		"SUBSCRIBE":                     4,
		"EVENTVIEW":                     5,
		"EVENTREGISTERED":               6,
		"SUBSCRIBEGIFT":                 7,
		"USERUPGRADE":                   8,
		"GRADEUSERENTRANCENOTIFICATION": 9,
		"FANSLEVELUPGRADE":              10,
		"FANSLEVELENTRANCE":             11,
		"GAMEPARTNERSHIP":               12,
	}
)

func (x WebcastBarrageMessage_BarrageType) Enum() *WebcastBarrageMessage_BarrageType {
	p := new(WebcastBarrageMessage_BarrageType)
	*p = x
	return p
}

func (x WebcastBarrageMessage_BarrageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebcastBarrageMessage_BarrageType) Descriptor() protoreflect.EnumDescriptor {
	return file_webcast_proto_enumTypes[0].Descriptor()
}

func (WebcastBarrageMessage_BarrageType) Type() protoreflect.EnumType {
	return &file_webcast_proto_enumTypes[0]
}

func (x WebcastBarrageMessage_BarrageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebcastBarrageMessage_BarrageType.Descriptor instead.
func (WebcastBarrageMessage_BarrageType) EnumDescriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{5, 0}
}

// @WebcastPushFrame
// Response from TikTokServer. Container for Messages
type WebcastPushFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqId           uint64            `protobuf:"varint,1,opt,name=SeqId,proto3" json:"SeqId,omitempty"`
	LogId           uint64            `protobuf:"varint,2,opt,name=LogId,proto3" json:"LogId,omitempty"`
	Service         uint64            `protobuf:"varint,3,opt,name=Service,proto3" json:"Service,omitempty"`
	Method          uint64            `protobuf:"varint,4,opt,name=Method,proto3" json:"Method,omitempty"`
	Headers         map[string]string `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PayloadEncoding string            `protobuf:"bytes,6,opt,name=PayloadEncoding,proto3" json:"PayloadEncoding,omitempty"`
	PayloadType     string            `protobuf:"bytes,7,opt,name=PayloadType,proto3" json:"PayloadType,omitempty"`
	Payload         []byte            `protobuf:"bytes,8,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *WebcastPushFrame) Reset() {
	*x = WebcastPushFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastPushFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastPushFrame) ProtoMessage() {}

func (x *WebcastPushFrame) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastPushFrame.ProtoReflect.Descriptor instead.
func (*WebcastPushFrame) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{0}
}

func (x *WebcastPushFrame) GetSeqId() uint64 {
	if x != nil {
		return x.SeqId
	}
	return 0
}

func (x *WebcastPushFrame) GetLogId() uint64 {
	if x != nil {
		return x.LogId
	}
	return 0
}

func (x *WebcastPushFrame) GetService() uint64 {
	if x != nil {
		return x.Service
	}
	return 0
}

func (x *WebcastPushFrame) GetMethod() uint64 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *WebcastPushFrame) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *WebcastPushFrame) GetPayloadEncoding() string {
	if x != nil {
		return x.PayloadEncoding
	}
	return ""
}

func (x *WebcastPushFrame) GetPayloadType() string {
	if x != nil {
		return x.PayloadType
	}
	return ""
}

func (x *WebcastPushFrame) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// @WebcastResponse
// Response from TikTokServer. Container for Messages
type WebcastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages             []*WebcastResponse_Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Cursor               string                     `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	FetchInterval        int64                      `protobuf:"varint,3,opt,name=fetchInterval,proto3" json:"fetchInterval,omitempty"`
	Now                  int64                      `protobuf:"varint,4,opt,name=now,proto3" json:"now,omitempty"`
	InternalExt          string                     `protobuf:"bytes,5,opt,name=internalExt,proto3" json:"internalExt,omitempty"`
	FetchType            int32                      `protobuf:"varint,6,opt,name=fetchType,proto3" json:"fetchType,omitempty"`
	RouteParamsMap       map[string]string          `protobuf:"bytes,7,rep,name=routeParamsMap,proto3" json:"routeParamsMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HeartBeatDuration    int64                      `protobuf:"varint,8,opt,name=heartBeatDuration,proto3" json:"heartBeatDuration,omitempty"`
	NeedsAck             bool                       `protobuf:"varint,9,opt,name=needsAck,proto3" json:"needsAck,omitempty"`
	PushServer           string                     `protobuf:"bytes,10,opt,name=pushServer,proto3" json:"pushServer,omitempty"`
	IsFirst              bool                       `protobuf:"varint,11,opt,name=isFirst,proto3" json:"isFirst,omitempty"`
	HistoryCommentCursor string                     `protobuf:"bytes,12,opt,name=historyCommentCursor,proto3" json:"historyCommentCursor,omitempty"`
	HistoryNoMore        bool                       `protobuf:"varint,13,opt,name=historyNoMore,proto3" json:"historyNoMore,omitempty"`
}

func (x *WebcastResponse) Reset() {
	*x = WebcastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastResponse) ProtoMessage() {}

func (x *WebcastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastResponse.ProtoReflect.Descriptor instead.
func (*WebcastResponse) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{1}
}

func (x *WebcastResponse) GetMessages() []*WebcastResponse_Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *WebcastResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *WebcastResponse) GetFetchInterval() int64 {
	if x != nil {
		return x.FetchInterval
	}
	return 0
}

func (x *WebcastResponse) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *WebcastResponse) GetInternalExt() string {
	if x != nil {
		return x.InternalExt
	}
	return ""
}

func (x *WebcastResponse) GetFetchType() int32 {
	if x != nil {
		return x.FetchType
	}
	return 0
}

func (x *WebcastResponse) GetRouteParamsMap() map[string]string {
	if x != nil {
		return x.RouteParamsMap
	}
	return nil
}

func (x *WebcastResponse) GetHeartBeatDuration() int64 {
	if x != nil {
		return x.HeartBeatDuration
	}
	return 0
}

func (x *WebcastResponse) GetNeedsAck() bool {
	if x != nil {
		return x.NeedsAck
	}
	return false
}

func (x *WebcastResponse) GetPushServer() string {
	if x != nil {
		return x.PushServer
	}
	return ""
}

func (x *WebcastResponse) GetIsFirst() bool {
	if x != nil {
		return x.IsFirst
	}
	return false
}

func (x *WebcastResponse) GetHistoryCommentCursor() string {
	if x != nil {
		return x.HistoryCommentCursor
	}
	return ""
}

func (x *WebcastResponse) GetHistoryNoMore() bool {
	if x != nil {
		return x.HistoryNoMore
	}
	return false
}

// @GiftMessage
type WebcastGiftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common             *Common                              `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	GiftId             int64                                `protobuf:"varint,2,opt,name=giftId,proto3" json:"giftId,omitempty"`
	FanTicketCount     int64                                `protobuf:"varint,3,opt,name=fanTicketCount,proto3" json:"fanTicketCount,omitempty"`
	GroupCount         int32                                `protobuf:"varint,4,opt,name=groupCount,proto3" json:"groupCount,omitempty"`
	RepeatCount        int32                                `protobuf:"varint,5,opt,name=repeatCount,proto3" json:"repeatCount,omitempty"`
	ComboCount         int32                                `protobuf:"varint,6,opt,name=comboCount,proto3" json:"comboCount,omitempty"`
	User               *User                                `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	ToUser             *User                                `protobuf:"bytes,8,opt,name=toUser,proto3" json:"toUser,omitempty"`
	RepeatEnd          int32                                `protobuf:"varint,9,opt,name=repeatEnd,proto3" json:"repeatEnd,omitempty"`
	GroupId            int64                                `protobuf:"varint,11,opt,name=groupId,proto3" json:"groupId,omitempty"`
	IncomeTaskgifts    int64                                `protobuf:"varint,12,opt,name=incomeTaskgifts,proto3" json:"incomeTaskgifts,omitempty"`
	RoomFanTicketCount int64                                `protobuf:"varint,13,opt,name=roomFanTicketCount,proto3" json:"roomFanTicketCount,omitempty"`
	Gift               *GiftStruct                          `protobuf:"bytes,15,opt,name=gift,proto3" json:"gift,omitempty"`
	LogId              string                               `protobuf:"bytes,16,opt,name=logId,proto3" json:"logId,omitempty"`
	SendType           int64                                `protobuf:"varint,17,opt,name=sendType,proto3" json:"sendType,omitempty"`
	MonitorExtra       string                               `protobuf:"bytes,22,opt,name=monitorExtra,proto3" json:"monitorExtra,omitempty"`
	ColorId            int64                                `protobuf:"varint,24,opt,name=colorId,proto3" json:"colorId,omitempty"`
	IsFirstSent        bool                                 `protobuf:"varint,25,opt,name=isFirstSent,proto3" json:"isFirstSent,omitempty"`
	OrderId            string                               `protobuf:"bytes,28,opt,name=orderId,proto3" json:"orderId,omitempty"`
	UserIdentity       *UserIdentity                        `protobuf:"bytes,32,opt,name=userIdentity,proto3" json:"userIdentity,omitempty"`
	UserGiftReciever   *WebcastGiftMessage_UserGiftReciever `protobuf:"bytes,23,opt,name=userGiftReciever,proto3" json:"userGiftReciever,omitempty"`
}

func (x *WebcastGiftMessage) Reset() {
	*x = WebcastGiftMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastGiftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastGiftMessage) ProtoMessage() {}

func (x *WebcastGiftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastGiftMessage.ProtoReflect.Descriptor instead.
func (*WebcastGiftMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{2}
}

func (x *WebcastGiftMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastGiftMessage) GetGiftId() int64 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *WebcastGiftMessage) GetFanTicketCount() int64 {
	if x != nil {
		return x.FanTicketCount
	}
	return 0
}

func (x *WebcastGiftMessage) GetGroupCount() int32 {
	if x != nil {
		return x.GroupCount
	}
	return 0
}

func (x *WebcastGiftMessage) GetRepeatCount() int32 {
	if x != nil {
		return x.RepeatCount
	}
	return 0
}

func (x *WebcastGiftMessage) GetComboCount() int32 {
	if x != nil {
		return x.ComboCount
	}
	return 0
}

func (x *WebcastGiftMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebcastGiftMessage) GetToUser() *User {
	if x != nil {
		return x.ToUser
	}
	return nil
}

func (x *WebcastGiftMessage) GetRepeatEnd() int32 {
	if x != nil {
		return x.RepeatEnd
	}
	return 0
}

func (x *WebcastGiftMessage) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *WebcastGiftMessage) GetIncomeTaskgifts() int64 {
	if x != nil {
		return x.IncomeTaskgifts
	}
	return 0
}

func (x *WebcastGiftMessage) GetRoomFanTicketCount() int64 {
	if x != nil {
		return x.RoomFanTicketCount
	}
	return 0
}

func (x *WebcastGiftMessage) GetGift() *GiftStruct {
	if x != nil {
		return x.Gift
	}
	return nil
}

func (x *WebcastGiftMessage) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *WebcastGiftMessage) GetSendType() int64 {
	if x != nil {
		return x.SendType
	}
	return 0
}

func (x *WebcastGiftMessage) GetMonitorExtra() string {
	if x != nil {
		return x.MonitorExtra
	}
	return ""
}

func (x *WebcastGiftMessage) GetColorId() int64 {
	if x != nil {
		return x.ColorId
	}
	return 0
}

func (x *WebcastGiftMessage) GetIsFirstSent() bool {
	if x != nil {
		return x.IsFirstSent
	}
	return false
}

func (x *WebcastGiftMessage) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *WebcastGiftMessage) GetUserIdentity() *UserIdentity {
	if x != nil {
		return x.UserIdentity
	}
	return nil
}

func (x *WebcastGiftMessage) GetUserGiftReciever() *WebcastGiftMessage_UserGiftReciever {
	if x != nil {
		return x.UserGiftReciever
	}
	return nil
}

// @RoomMessage
type RoomMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common           *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Content          string  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	SupprotLandscape bool    `protobuf:"varint,3,opt,name=supprotLandscape,proto3" json:"supprotLandscape,omitempty"`
	Source           int64   `protobuf:"varint,4,opt,name=source,proto3" json:"source,omitempty"`
	Icon             *Image  `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Scene            string  `protobuf:"bytes,6,opt,name=scene,proto3" json:"scene,omitempty"`
	IsWelcome        bool    `protobuf:"varint,7,opt,name=isWelcome,proto3" json:"isWelcome,omitempty"`
}

func (x *RoomMessage) Reset() {
	*x = RoomMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomMessage) ProtoMessage() {}

func (x *RoomMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomMessage.ProtoReflect.Descriptor instead.
func (*RoomMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{3}
}

func (x *RoomMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RoomMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RoomMessage) GetSupprotLandscape() bool {
	if x != nil {
		return x.SupprotLandscape
	}
	return false
}

func (x *RoomMessage) GetSource() int64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *RoomMessage) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *RoomMessage) GetScene() string {
	if x != nil {
		return x.Scene
	}
	return ""
}

func (x *RoomMessage) GetIsWelcome() bool {
	if x != nil {
		return x.IsWelcome
	}
	return false
}

// @WebcastRoomMessage
type WebcastRoomMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Content string  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *WebcastRoomMessage) Reset() {
	*x = WebcastRoomMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastRoomMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastRoomMessage) ProtoMessage() {}

func (x *WebcastRoomMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastRoomMessage.ProtoReflect.Descriptor instead.
func (*WebcastRoomMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{4}
}

func (x *WebcastRoomMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastRoomMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// @WebcastBarrageMessage
type WebcastBarrageMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common             *Common                                              `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Event              *WebcastBarrageMessage_BarrageEvent                  `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	MsgType            WebcastBarrageMessage_BarrageType                    `protobuf:"varint,3,opt,name=msgType,proto3,enum=tiktok_hack.WebcastBarrageMessage_BarrageType" json:"msgType,omitempty"` // Enum
	Icon               *Image                                               `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Content            *Text                                                `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Duration           int32                                                `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	Background         *Image                                               `protobuf:"bytes,7,opt,name=background,proto3" json:"background,omitempty"`
	RightIcon          *Image                                               `protobuf:"bytes,8,opt,name=rightIcon,proto3" json:"rightIcon,omitempty"`
	UserGradeParam     *WebcastBarrageMessage_BarrageTypeUserGradeParam     `protobuf:"bytes,100,opt,name=userGradeParam,proto3" json:"userGradeParam,omitempty"`
	FansLevelParam     *WebcastBarrageMessage_BarrageTypeFansLevelParam     `protobuf:"bytes,101,opt,name=fansLevelParam,proto3" json:"fansLevelParam,omitempty"`
	SubscribeGiftParam *WebcastBarrageMessage_BarrageTypeSubscribeGiftParam `protobuf:"bytes,102,opt,name=subscribeGiftParam,proto3" json:"subscribeGiftParam,omitempty"`
}

func (x *WebcastBarrageMessage) Reset() {
	*x = WebcastBarrageMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastBarrageMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastBarrageMessage) ProtoMessage() {}

func (x *WebcastBarrageMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastBarrageMessage.ProtoReflect.Descriptor instead.
func (*WebcastBarrageMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{5}
}

func (x *WebcastBarrageMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastBarrageMessage) GetEvent() *WebcastBarrageMessage_BarrageEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *WebcastBarrageMessage) GetMsgType() WebcastBarrageMessage_BarrageType {
	if x != nil {
		return x.MsgType
	}
	return WebcastBarrageMessage_UNKNOWN
}

func (x *WebcastBarrageMessage) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *WebcastBarrageMessage) GetContent() *Text {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *WebcastBarrageMessage) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *WebcastBarrageMessage) GetBackground() *Image {
	if x != nil {
		return x.Background
	}
	return nil
}

func (x *WebcastBarrageMessage) GetRightIcon() *Image {
	if x != nil {
		return x.RightIcon
	}
	return nil
}

func (x *WebcastBarrageMessage) GetUserGradeParam() *WebcastBarrageMessage_BarrageTypeUserGradeParam {
	if x != nil {
		return x.UserGradeParam
	}
	return nil
}

func (x *WebcastBarrageMessage) GetFansLevelParam() *WebcastBarrageMessage_BarrageTypeFansLevelParam {
	if x != nil {
		return x.FansLevelParam
	}
	return nil
}

func (x *WebcastBarrageMessage) GetSubscribeGiftParam() *WebcastBarrageMessage_BarrageTypeSubscribeGiftParam {
	if x != nil {
		return x.SubscribeGiftParam
	}
	return nil
}

// @WebcastCaptionMessage
// Closed Captioning for Video
type WebcastCaptionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common      *Common                            `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	TimeStamp   uint64                             `protobuf:"varint,2,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	CaptionData *WebcastCaptionMessage_CaptionData `protobuf:"bytes,4,opt,name=captionData,proto3" json:"captionData,omitempty"`
}

func (x *WebcastCaptionMessage) Reset() {
	*x = WebcastCaptionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastCaptionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastCaptionMessage) ProtoMessage() {}

func (x *WebcastCaptionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastCaptionMessage.ProtoReflect.Descriptor instead.
func (*WebcastCaptionMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{6}
}

func (x *WebcastCaptionMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastCaptionMessage) GetTimeStamp() uint64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *WebcastCaptionMessage) GetCaptionData() *WebcastCaptionMessage_CaptionData {
	if x != nil {
		return x.CaptionData
	}
	return nil
}

// Comment sent by User
// @WebcastChatMessage
type WebcastChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                 *Common                              `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User                   *User                                `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Content                string                               `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	VisibleToSender        bool                                 `protobuf:"varint,4,opt,name=visibleToSender,proto3" json:"visibleToSender,omitempty"`
	BackgroundImage        *Image                               `protobuf:"bytes,5,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty"`
	FullScreenTextColor    string                               `protobuf:"bytes,6,opt,name=fullScreenTextColor,proto3" json:"fullScreenTextColor,omitempty"`
	BackgroundImageV2      *Image                               `protobuf:"bytes,7,opt,name=backgroundImageV2,proto3" json:"backgroundImageV2,omitempty"`
	GiftImage              *Image                               `protobuf:"bytes,10,opt,name=giftImage,proto3" json:"giftImage,omitempty"`
	InputType              int32                                `protobuf:"varint,11,opt,name=inputType,proto3" json:"inputType,omitempty"`
	AtUser                 *User                                `protobuf:"bytes,12,opt,name=atUser,proto3" json:"atUser,omitempty"`
	EmotesList             []*WebcastChatMessage_EmoteWithIndex `protobuf:"bytes,13,rep,name=emotesList,proto3" json:"emotesList,omitempty"`
	ContentLanguage        string                               `protobuf:"bytes,14,opt,name=contentLanguage,proto3" json:"contentLanguage,omitempty"`
	QuickChatScene         int32                                `protobuf:"varint,16,opt,name=quickChatScene,proto3" json:"quickChatScene,omitempty"`
	CommunityFlaggedStatus int32                                `protobuf:"varint,17,opt,name=communityFlaggedStatus,proto3" json:"communityFlaggedStatus,omitempty"`
	UserIdentity           *UserIdentity                        `protobuf:"bytes,18,opt,name=UserIdentity,proto3" json:"UserIdentity,omitempty"`
	CommentQualityScores   map[string]string                    `protobuf:"bytes,19,rep,name=CommentQualityScores,proto3" json:"CommentQualityScores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WebcastChatMessage) Reset() {
	*x = WebcastChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastChatMessage) ProtoMessage() {}

func (x *WebcastChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastChatMessage.ProtoReflect.Descriptor instead.
func (*WebcastChatMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{7}
}

func (x *WebcastChatMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastChatMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebcastChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WebcastChatMessage) GetVisibleToSender() bool {
	if x != nil {
		return x.VisibleToSender
	}
	return false
}

func (x *WebcastChatMessage) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *WebcastChatMessage) GetFullScreenTextColor() string {
	if x != nil {
		return x.FullScreenTextColor
	}
	return ""
}

func (x *WebcastChatMessage) GetBackgroundImageV2() *Image {
	if x != nil {
		return x.BackgroundImageV2
	}
	return nil
}

func (x *WebcastChatMessage) GetGiftImage() *Image {
	if x != nil {
		return x.GiftImage
	}
	return nil
}

func (x *WebcastChatMessage) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *WebcastChatMessage) GetAtUser() *User {
	if x != nil {
		return x.AtUser
	}
	return nil
}

func (x *WebcastChatMessage) GetEmotesList() []*WebcastChatMessage_EmoteWithIndex {
	if x != nil {
		return x.EmotesList
	}
	return nil
}

func (x *WebcastChatMessage) GetContentLanguage() string {
	if x != nil {
		return x.ContentLanguage
	}
	return ""
}

func (x *WebcastChatMessage) GetQuickChatScene() int32 {
	if x != nil {
		return x.QuickChatScene
	}
	return 0
}

func (x *WebcastChatMessage) GetCommunityFlaggedStatus() int32 {
	if x != nil {
		return x.CommunityFlaggedStatus
	}
	return 0
}

func (x *WebcastChatMessage) GetUserIdentity() *UserIdentity {
	if x != nil {
		return x.UserIdentity
	}
	return nil
}

func (x *WebcastChatMessage) GetCommentQualityScores() map[string]string {
	if x != nil {
		return x.CommentQualityScores
	}
	return nil
}

// System-Control Message from Room (e.g. Host ended Stream)
// @WebcastControlMessage
type WebcastControlMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *Common                      `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Action ControlAction                `protobuf:"varint,2,opt,name=action,proto3,enum=tiktok_hack.ControlAction" json:"action,omitempty"`
	Tips   string                       `protobuf:"bytes,3,opt,name=tips,proto3" json:"tips,omitempty"`
	Extra  *WebcastControlMessage_Extra `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
	// PerceptionDialogInfo perceptionDialog = 5;
	PerceptionAudienceText *Text            `protobuf:"bytes,6,opt,name=perceptionAudienceText,proto3" json:"perceptionAudienceText,omitempty"`
	PunishInfo             *PunishEventInfo `protobuf:"bytes,7,opt,name=punishInfo,proto3" json:"punishInfo,omitempty"`
	FloatText              *Text            `protobuf:"bytes,8,opt,name=floatText,proto3" json:"floatText,omitempty"`
	FloatStyle             int32            `protobuf:"varint,9,opt,name=floatStyle,proto3" json:"floatStyle,omitempty"`
}

func (x *WebcastControlMessage) Reset() {
	*x = WebcastControlMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastControlMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastControlMessage) ProtoMessage() {}

func (x *WebcastControlMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastControlMessage.ProtoReflect.Descriptor instead.
func (*WebcastControlMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{8}
}

func (x *WebcastControlMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastControlMessage) GetAction() ControlAction {
	if x != nil {
		return x.Action
	}
	return ControlAction_ControlActionUNKNOWN
}

func (x *WebcastControlMessage) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

func (x *WebcastControlMessage) GetExtra() *WebcastControlMessage_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *WebcastControlMessage) GetPerceptionAudienceText() *Text {
	if x != nil {
		return x.PerceptionAudienceText
	}
	return nil
}

func (x *WebcastControlMessage) GetPunishInfo() *PunishEventInfo {
	if x != nil {
		return x.PunishInfo
	}
	return nil
}

func (x *WebcastControlMessage) GetFloatText() *Text {
	if x != nil {
		return x.FloatText
	}
	return nil
}

func (x *WebcastControlMessage) GetFloatStyle() int32 {
	if x != nil {
		return x.FloatStyle
	}
	return 0
}

// Emote sent by user
// @WebcastEmoteChatMessage
type WebcastEmoteChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common       *Common       `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User         *User         `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	EmoteList    []*Emote      `protobuf:"bytes,3,rep,name=emoteList,proto3" json:"emoteList,omitempty"`
	MsgFilter    *MsgFilter    `protobuf:"bytes,4,opt,name=msgFilter,proto3" json:"msgFilter,omitempty"`
	UserIdentity *UserIdentity `protobuf:"bytes,5,opt,name=userIdentity,proto3" json:"userIdentity,omitempty"`
}

func (x *WebcastEmoteChatMessage) Reset() {
	*x = WebcastEmoteChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastEmoteChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastEmoteChatMessage) ProtoMessage() {}

func (x *WebcastEmoteChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastEmoteChatMessage.ProtoReflect.Descriptor instead.
func (*WebcastEmoteChatMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{9}
}

func (x *WebcastEmoteChatMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastEmoteChatMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebcastEmoteChatMessage) GetEmoteList() []*Emote {
	if x != nil {
		return x.EmoteList
	}
	return nil
}

func (x *WebcastEmoteChatMessage) GetMsgFilter() *MsgFilter {
	if x != nil {
		return x.MsgFilter
	}
	return nil
}

func (x *WebcastEmoteChatMessage) GetUserIdentity() *UserIdentity {
	if x != nil {
		return x.UserIdentity
	}
	return nil
}

// @WebcastEnvelopeMessage
type WebcastEnvelopeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common       *Common                              `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	EnvelopeInfo *WebcastEnvelopeMessage_EnvelopeInfo `protobuf:"bytes,2,opt,name=envelopeInfo,proto3" json:"envelopeInfo,omitempty"`
	Display      EnvelopeDisplay                      `protobuf:"varint,3,opt,name=display,proto3,enum=tiktok_hack.EnvelopeDisplay" json:"display,omitempty"` // @warning Enum not found, should be Display
}

func (x *WebcastEnvelopeMessage) Reset() {
	*x = WebcastEnvelopeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastEnvelopeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastEnvelopeMessage) ProtoMessage() {}

func (x *WebcastEnvelopeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastEnvelopeMessage.ProtoReflect.Descriptor instead.
func (*WebcastEnvelopeMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{10}
}

func (x *WebcastEnvelopeMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastEnvelopeMessage) GetEnvelopeInfo() *WebcastEnvelopeMessage_EnvelopeInfo {
	if x != nil {
		return x.EnvelopeInfo
	}
	return nil
}

func (x *WebcastEnvelopeMessage) GetDisplay() EnvelopeDisplay {
	if x != nil {
		return x.Display
	}
	return EnvelopeDisplay_EnvelopeDisplayUnknown
}

// @WebcastGoalUpdateMessage
type WebcastGoalUpdateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common               *Common    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Indicator            *Indicator `protobuf:"bytes,2,opt,name=indicator,proto3" json:"indicator,omitempty"`
	Goal                 *Goal      `protobuf:"bytes,3,opt,name=goal,proto3" json:"goal,omitempty"`
	ContributorId        int64      `protobuf:"varint,4,opt,name=contributorId,proto3" json:"contributorId,omitempty"`
	ContributorAvatar    *Image     `protobuf:"bytes,5,opt,name=contributorAvatar,proto3" json:"contributorAvatar,omitempty"`
	ContributorDisplayId string     `protobuf:"bytes,6,opt,name=contributorDisplayId,proto3" json:"contributorDisplayId,omitempty"`
	// SubGoal contributeSubgoal = 7;
	ContributeCount  int64  `protobuf:"varint,9,opt,name=contributeCount,proto3" json:"contributeCount,omitempty"`
	ContributeScore  int64  `protobuf:"varint,10,opt,name=contributeScore,proto3" json:"contributeScore,omitempty"`
	GiftRepeatCount  int64  `protobuf:"varint,11,opt,name=giftRepeatCount,proto3" json:"giftRepeatCount,omitempty"`
	ContributorIdStr string `protobuf:"bytes,12,opt,name=contributorIdStr,proto3" json:"contributorIdStr,omitempty"`
	Pin              bool   `protobuf:"varint,13,opt,name=pin,proto3" json:"pin,omitempty"`
	Unpin            bool   `protobuf:"varint,14,opt,name=unpin,proto3" json:"unpin,omitempty"` // GoalPinInfo pinInfo = 15;
}

func (x *WebcastGoalUpdateMessage) Reset() {
	*x = WebcastGoalUpdateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastGoalUpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastGoalUpdateMessage) ProtoMessage() {}

func (x *WebcastGoalUpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastGoalUpdateMessage.ProtoReflect.Descriptor instead.
func (*WebcastGoalUpdateMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{11}
}

func (x *WebcastGoalUpdateMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastGoalUpdateMessage) GetIndicator() *Indicator {
	if x != nil {
		return x.Indicator
	}
	return nil
}

func (x *WebcastGoalUpdateMessage) GetGoal() *Goal {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *WebcastGoalUpdateMessage) GetContributorId() int64 {
	if x != nil {
		return x.ContributorId
	}
	return 0
}

func (x *WebcastGoalUpdateMessage) GetContributorAvatar() *Image {
	if x != nil {
		return x.ContributorAvatar
	}
	return nil
}

func (x *WebcastGoalUpdateMessage) GetContributorDisplayId() string {
	if x != nil {
		return x.ContributorDisplayId
	}
	return ""
}

func (x *WebcastGoalUpdateMessage) GetContributeCount() int64 {
	if x != nil {
		return x.ContributeCount
	}
	return 0
}

func (x *WebcastGoalUpdateMessage) GetContributeScore() int64 {
	if x != nil {
		return x.ContributeScore
	}
	return 0
}

func (x *WebcastGoalUpdateMessage) GetGiftRepeatCount() int64 {
	if x != nil {
		return x.GiftRepeatCount
	}
	return 0
}

func (x *WebcastGoalUpdateMessage) GetContributorIdStr() string {
	if x != nil {
		return x.ContributorIdStr
	}
	return ""
}

func (x *WebcastGoalUpdateMessage) GetPin() bool {
	if x != nil {
		return x.Pin
	}
	return false
}

func (x *WebcastGoalUpdateMessage) GetUnpin() bool {
	if x != nil {
		return x.Unpin
	}
	return false
}

// Message related to Chat-moderation?
// @WebcastImDeleteMessage
type WebcastImDeleteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	DeleteMsgIdsList  []int64 `protobuf:"varint,2,rep,packed,name=deleteMsgIdsList,proto3" json:"deleteMsgIdsList,omitempty"`
	DeleteUserIdsList []int64 `protobuf:"varint,3,rep,packed,name=deleteUserIdsList,proto3" json:"deleteUserIdsList,omitempty"`
}

func (x *WebcastImDeleteMessage) Reset() {
	*x = WebcastImDeleteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastImDeleteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastImDeleteMessage) ProtoMessage() {}

func (x *WebcastImDeleteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastImDeleteMessage.ProtoReflect.Descriptor instead.
func (*WebcastImDeleteMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{12}
}

func (x *WebcastImDeleteMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastImDeleteMessage) GetDeleteMsgIdsList() []int64 {
	if x != nil {
		return x.DeleteMsgIdsList
	}
	return nil
}

func (x *WebcastImDeleteMessage) GetDeleteUserIdsList() []int64 {
	if x != nil {
		return x.DeleteUserIdsList
	}
	return nil
}

// @WebcastInRoomBannerMessage
type WebcastInRoomBannerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Common `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Json   string  `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"` // Json-Data for BannerMessage
}

func (x *WebcastInRoomBannerMessage) Reset() {
	*x = WebcastInRoomBannerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastInRoomBannerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastInRoomBannerMessage) ProtoMessage() {}

func (x *WebcastInRoomBannerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastInRoomBannerMessage.ProtoReflect.Descriptor instead.
func (*WebcastInRoomBannerMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{13}
}

func (x *WebcastInRoomBannerMessage) GetHeader() *Common {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WebcastInRoomBannerMessage) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

// User sent one or multiple likes to Stream. Maxes at 15 likes per message
// @WebcastLikeMessage
type WebcastLikeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Count  int32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Total  int32   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	User   *User   `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *WebcastLikeMessage) Reset() {
	*x = WebcastLikeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLikeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLikeMessage) ProtoMessage() {}

func (x *WebcastLikeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLikeMessage.ProtoReflect.Descriptor instead.
func (*WebcastLikeMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{14}
}

func (x *WebcastLikeMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastLikeMessage) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WebcastLikeMessage) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *WebcastLikeMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// Status of Room (ViewerCount + Top Viewers)
// @WebcastRoomUserSeqMessage
type WebcastRoomUserSeqMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common     *Common                                  `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	RanksList  []*WebcastRoomUserSeqMessage_Contributor `protobuf:"bytes,2,rep,name=ranksList,proto3" json:"ranksList,omitempty"`
	Total      int64                                    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	PopStr     string                                   `protobuf:"bytes,4,opt,name=popStr,proto3" json:"popStr,omitempty"`
	SeatsList  []*WebcastRoomUserSeqMessage_Contributor `protobuf:"bytes,5,rep,name=seatsList,proto3" json:"seatsList,omitempty"`
	Popularity int64                                    `protobuf:"varint,6,opt,name=popularity,proto3" json:"popularity,omitempty"`
	TotalUser  int32                                    `protobuf:"varint,7,opt,name=totalUser,proto3" json:"totalUser,omitempty"`
	Anonymous  int64                                    `protobuf:"varint,8,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
}

func (x *WebcastRoomUserSeqMessage) Reset() {
	*x = WebcastRoomUserSeqMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastRoomUserSeqMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastRoomUserSeqMessage) ProtoMessage() {}

func (x *WebcastRoomUserSeqMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastRoomUserSeqMessage.ProtoReflect.Descriptor instead.
func (*WebcastRoomUserSeqMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{15}
}

func (x *WebcastRoomUserSeqMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastRoomUserSeqMessage) GetRanksList() []*WebcastRoomUserSeqMessage_Contributor {
	if x != nil {
		return x.RanksList
	}
	return nil
}

func (x *WebcastRoomUserSeqMessage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *WebcastRoomUserSeqMessage) GetPopStr() string {
	if x != nil {
		return x.PopStr
	}
	return ""
}

func (x *WebcastRoomUserSeqMessage) GetSeatsList() []*WebcastRoomUserSeqMessage_Contributor {
	if x != nil {
		return x.SeatsList
	}
	return nil
}

func (x *WebcastRoomUserSeqMessage) GetPopularity() int64 {
	if x != nil {
		return x.Popularity
	}
	return 0
}

func (x *WebcastRoomUserSeqMessage) GetTotalUser() int32 {
	if x != nil {
		return x.TotalUser
	}
	return 0
}

func (x *WebcastRoomUserSeqMessage) GetAnonymous() int64 {
	if x != nil {
		return x.Anonymous
	}
	return 0
}

// Sent for a variety of events, including Follow & Share
// @WebcastSocialMessage
type WebcastSocialMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User              *User   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	ShareType         int64   `protobuf:"varint,3,opt,name=shareType,proto3" json:"shareType,omitempty"`
	Action            int64   `protobuf:"varint,4,opt,name=action,proto3" json:"action,omitempty"`
	ShareTarget       string  `protobuf:"bytes,5,opt,name=shareTarget,proto3" json:"shareTarget,omitempty"`
	FollowCount       int32   `protobuf:"varint,6,opt,name=followCount,proto3" json:"followCount,omitempty"`
	ShareDisplayStyle int64   `protobuf:"varint,7,opt,name=shareDisplayStyle,proto3" json:"shareDisplayStyle,omitempty"`
	ShareCount        int32   `protobuf:"varint,8,opt,name=shareCount,proto3" json:"shareCount,omitempty"`
}

func (x *WebcastSocialMessage) Reset() {
	*x = WebcastSocialMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastSocialMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastSocialMessage) ProtoMessage() {}

func (x *WebcastSocialMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastSocialMessage.ProtoReflect.Descriptor instead.
func (*WebcastSocialMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{16}
}

func (x *WebcastSocialMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastSocialMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebcastSocialMessage) GetShareType() int64 {
	if x != nil {
		return x.ShareType
	}
	return 0
}

func (x *WebcastSocialMessage) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *WebcastSocialMessage) GetShareTarget() string {
	if x != nil {
		return x.ShareTarget
	}
	return ""
}

func (x *WebcastSocialMessage) GetFollowCount() int32 {
	if x != nil {
		return x.FollowCount
	}
	return 0
}

func (x *WebcastSocialMessage) GetShareDisplayStyle() int64 {
	if x != nil {
		return x.ShareDisplayStyle
	}
	return 0
}

func (x *WebcastSocialMessage) GetShareCount() int32 {
	if x != nil {
		return x.ShareCount
	}
	return 0
}

// @WebcastSubNotifyMessage
type WebcastSubNotifyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User   *User   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// ExhibitionType exhibitionType = 3; // Enum
	SubMonth           int64              `protobuf:"varint,4,opt,name=subMonth,proto3" json:"subMonth,omitempty"`
	SubscribeType      SubscribeType      `protobuf:"varint,5,opt,name=subscribeType,proto3,enum=tiktok_hack.SubscribeType" json:"subscribeType,omitempty"`                // Enum
	OldSubscribeStatus OldSubscribeStatus `protobuf:"varint,6,opt,name=oldSubscribeStatus,proto3,enum=tiktok_hack.OldSubscribeStatus" json:"oldSubscribeStatus,omitempty"` // Enum
	SubscribingStatus  SubscribingStatus  `protobuf:"varint,8,opt,name=subscribingStatus,proto3,enum=tiktok_hack.SubscribingStatus" json:"subscribingStatus,omitempty"`    // Enum
	IsSend             bool               `protobuf:"varint,9,opt,name=isSend,proto3" json:"isSend,omitempty"`
	IsCustom           bool               `protobuf:"varint,10,opt,name=isCustom,proto3" json:"isCustom,omitempty"`
}

func (x *WebcastSubNotifyMessage) Reset() {
	*x = WebcastSubNotifyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastSubNotifyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastSubNotifyMessage) ProtoMessage() {}

func (x *WebcastSubNotifyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastSubNotifyMessage.ProtoReflect.Descriptor instead.
func (*WebcastSubNotifyMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{17}
}

func (x *WebcastSubNotifyMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastSubNotifyMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebcastSubNotifyMessage) GetSubMonth() int64 {
	if x != nil {
		return x.SubMonth
	}
	return 0
}

func (x *WebcastSubNotifyMessage) GetSubscribeType() SubscribeType {
	if x != nil {
		return x.SubscribeType
	}
	return SubscribeType_SUBSCRIBETYPE_ONCE
}

func (x *WebcastSubNotifyMessage) GetOldSubscribeStatus() OldSubscribeStatus {
	if x != nil {
		return x.OldSubscribeStatus
	}
	return OldSubscribeStatus_OLDSUBSCRIBESTATUS_FIRST
}

func (x *WebcastSubNotifyMessage) GetSubscribingStatus() SubscribingStatus {
	if x != nil {
		return x.SubscribingStatus
	}
	return SubscribingStatus_SUBSCRIBINGSTATUS_UNKNOWN
}

func (x *WebcastSubNotifyMessage) GetIsSend() bool {
	if x != nil {
		return x.IsSend
	}
	return false
}

func (x *WebcastSubNotifyMessage) GetIsCustom() bool {
	if x != nil {
		return x.IsCustom
	}
	return false
}

// @WebcastRankUpdateMessage
type WebcastRankUpdateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common              *Common                                 `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	UpdatesList         []*WebcastRankUpdateMessage_RankUpdate  `protobuf:"bytes,2,rep,name=updatesList,proto3" json:"updatesList,omitempty"`
	GroupType           int64                                   `protobuf:"varint,3,opt,name=groupType,proto3" json:"groupType,omitempty"` // @warning Enum not found, should be GroupType
	Priority            int64                                   `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	TabsList            []*WebcastRankUpdateMessage_RankTabInfo `protobuf:"bytes,6,rep,name=tabsList,proto3" json:"tabsList,omitempty"`
	IsAnimationLoopPlay bool                                    `protobuf:"varint,7,opt,name=isAnimationLoopPlay,proto3" json:"isAnimationLoopPlay,omitempty"`
	AnimationLoopForOff bool                                    `protobuf:"varint,8,opt,name=animationLoopForOff,proto3" json:"animationLoopForOff,omitempty"`
}

func (x *WebcastRankUpdateMessage) Reset() {
	*x = WebcastRankUpdateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastRankUpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastRankUpdateMessage) ProtoMessage() {}

func (x *WebcastRankUpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastRankUpdateMessage.ProtoReflect.Descriptor instead.
func (*WebcastRankUpdateMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{18}
}

func (x *WebcastRankUpdateMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastRankUpdateMessage) GetUpdatesList() []*WebcastRankUpdateMessage_RankUpdate {
	if x != nil {
		return x.UpdatesList
	}
	return nil
}

func (x *WebcastRankUpdateMessage) GetGroupType() int64 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

func (x *WebcastRankUpdateMessage) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *WebcastRankUpdateMessage) GetTabsList() []*WebcastRankUpdateMessage_RankTabInfo {
	if x != nil {
		return x.TabsList
	}
	return nil
}

func (x *WebcastRankUpdateMessage) GetIsAnimationLoopPlay() bool {
	if x != nil {
		return x.IsAnimationLoopPlay
	}
	return false
}

func (x *WebcastRankUpdateMessage) GetAnimationLoopForOff() bool {
	if x != nil {
		return x.AnimationLoopForOff
	}
	return false
}

// Sent for a variety of events, including Join & Subscribe
// @WebcastMemberMessage
type WebcastMemberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *Common                            `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	User              *User                              `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	MemberCount       int32                              `protobuf:"varint,3,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	Operator          *User                              `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	IsSetToAdmin      bool                               `protobuf:"varint,5,opt,name=isSetToAdmin,proto3" json:"isSetToAdmin,omitempty"`
	IsTopUser         bool                               `protobuf:"varint,6,opt,name=isTopUser,proto3" json:"isTopUser,omitempty"`
	RankScore         int64                              `protobuf:"varint,7,opt,name=rankScore,proto3" json:"rankScore,omitempty"`
	TopUserNo         int64                              `protobuf:"varint,8,opt,name=topUserNo,proto3" json:"topUserNo,omitempty"`
	EnterType         int64                              `protobuf:"varint,9,opt,name=enterType,proto3" json:"enterType,omitempty"`
	Action            MemberMessageAction                `protobuf:"varint,10,opt,name=action,proto3,enum=tiktok_hack.MemberMessageAction" json:"action,omitempty"`
	ActionDescription string                             `protobuf:"bytes,11,opt,name=actionDescription,proto3" json:"actionDescription,omitempty"`
	UserId            int64                              `protobuf:"varint,12,opt,name=userId,proto3" json:"userId,omitempty"`
	EffectConfig      *WebcastMemberMessage_EffectConfig `protobuf:"bytes,13,opt,name=effectConfig,proto3" json:"effectConfig,omitempty"`
	PopStr            string                             `protobuf:"bytes,14,opt,name=popStr,proto3" json:"popStr,omitempty"`
	EnterEffectConfig *WebcastMemberMessage_EffectConfig `protobuf:"bytes,15,opt,name=enterEffectConfig,proto3" json:"enterEffectConfig,omitempty"`
	BackgroundImage   *Image                             `protobuf:"bytes,16,opt,name=backgroundImage,proto3" json:"backgroundImage,omitempty"`
	BackgroundImageV2 *Image                             `protobuf:"bytes,17,opt,name=backgroundImageV2,proto3" json:"backgroundImageV2,omitempty"`
	AnchorDisplayText *Text                              `protobuf:"bytes,18,opt,name=anchorDisplayText,proto3" json:"anchorDisplayText,omitempty"`
	ClientEnterSource string                             `protobuf:"bytes,19,opt,name=clientEnterSource,proto3" json:"clientEnterSource,omitempty"`
	ClientEnterType   string                             `protobuf:"bytes,20,opt,name=clientEnterType,proto3" json:"clientEnterType,omitempty"`
	ClientLiveReason  string                             `protobuf:"bytes,21,opt,name=clientLiveReason,proto3" json:"clientLiveReason,omitempty"`
	ActionDuration    int64                              `protobuf:"varint,22,opt,name=actionDuration,proto3" json:"actionDuration,omitempty"`
	UserShareType     string                             `protobuf:"bytes,23,opt,name=userShareType,proto3" json:"userShareType,omitempty"`
}

func (x *WebcastMemberMessage) Reset() {
	*x = WebcastMemberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastMemberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastMemberMessage) ProtoMessage() {}

func (x *WebcastMemberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastMemberMessage.ProtoReflect.Descriptor instead.
func (*WebcastMemberMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{19}
}

func (x *WebcastMemberMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastMemberMessage) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebcastMemberMessage) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *WebcastMemberMessage) GetOperator() *User {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *WebcastMemberMessage) GetIsSetToAdmin() bool {
	if x != nil {
		return x.IsSetToAdmin
	}
	return false
}

func (x *WebcastMemberMessage) GetIsTopUser() bool {
	if x != nil {
		return x.IsTopUser
	}
	return false
}

func (x *WebcastMemberMessage) GetRankScore() int64 {
	if x != nil {
		return x.RankScore
	}
	return 0
}

func (x *WebcastMemberMessage) GetTopUserNo() int64 {
	if x != nil {
		return x.TopUserNo
	}
	return 0
}

func (x *WebcastMemberMessage) GetEnterType() int64 {
	if x != nil {
		return x.EnterType
	}
	return 0
}

func (x *WebcastMemberMessage) GetAction() MemberMessageAction {
	if x != nil {
		return x.Action
	}
	return MemberMessageAction_UNKNOWN
}

func (x *WebcastMemberMessage) GetActionDescription() string {
	if x != nil {
		return x.ActionDescription
	}
	return ""
}

func (x *WebcastMemberMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WebcastMemberMessage) GetEffectConfig() *WebcastMemberMessage_EffectConfig {
	if x != nil {
		return x.EffectConfig
	}
	return nil
}

func (x *WebcastMemberMessage) GetPopStr() string {
	if x != nil {
		return x.PopStr
	}
	return ""
}

func (x *WebcastMemberMessage) GetEnterEffectConfig() *WebcastMemberMessage_EffectConfig {
	if x != nil {
		return x.EnterEffectConfig
	}
	return nil
}

func (x *WebcastMemberMessage) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *WebcastMemberMessage) GetBackgroundImageV2() *Image {
	if x != nil {
		return x.BackgroundImageV2
	}
	return nil
}

func (x *WebcastMemberMessage) GetAnchorDisplayText() *Text {
	if x != nil {
		return x.AnchorDisplayText
	}
	return nil
}

func (x *WebcastMemberMessage) GetClientEnterSource() string {
	if x != nil {
		return x.ClientEnterSource
	}
	return ""
}

func (x *WebcastMemberMessage) GetClientEnterType() string {
	if x != nil {
		return x.ClientEnterType
	}
	return ""
}

func (x *WebcastMemberMessage) GetClientLiveReason() string {
	if x != nil {
		return x.ClientLiveReason
	}
	return ""
}

func (x *WebcastMemberMessage) GetActionDuration() int64 {
	if x != nil {
		return x.ActionDuration
	}
	return 0
}

func (x *WebcastMemberMessage) GetUserShareType() string {
	if x != nil {
		return x.UserShareType
	}
	return ""
}

// --- HandMade --
// @WebcastPollMessage
type WebcastPollMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common        *Common                 `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	MessageType   MessageType             `protobuf:"varint,2,opt,name=messageType,proto3,enum=tiktok_hack.MessageType" json:"messageType,omitempty"`
	PollId        int64                   `protobuf:"varint,3,opt,name=pollId,proto3" json:"pollId,omitempty"`
	StartContent  *PollStartContent       `protobuf:"bytes,4,opt,name=startContent,proto3" json:"startContent,omitempty"`
	EndContent    *PollEndContent         `protobuf:"bytes,5,opt,name=endContent,proto3" json:"endContent,omitempty"`
	UpdateContent *PollUpdateVotesContent `protobuf:"bytes,6,opt,name=updateContent,proto3" json:"updateContent,omitempty"`
	PollKind      int32                   `protobuf:"varint,7,opt,name=pollKind,proto3" json:"pollKind,omitempty"` // Possibly an Enum?
}

func (x *WebcastPollMessage) Reset() {
	*x = WebcastPollMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastPollMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastPollMessage) ProtoMessage() {}

func (x *WebcastPollMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastPollMessage.ProtoReflect.Descriptor instead.
func (*WebcastPollMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{20}
}

func (x *WebcastPollMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastPollMessage) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGETYPE_SUBSUCCESS
}

func (x *WebcastPollMessage) GetPollId() int64 {
	if x != nil {
		return x.PollId
	}
	return 0
}

func (x *WebcastPollMessage) GetStartContent() *PollStartContent {
	if x != nil {
		return x.StartContent
	}
	return nil
}

func (x *WebcastPollMessage) GetEndContent() *PollEndContent {
	if x != nil {
		return x.EndContent
	}
	return nil
}

func (x *WebcastPollMessage) GetUpdateContent() *PollUpdateVotesContent {
	if x != nil {
		return x.UpdateContent
	}
	return nil
}

func (x *WebcastPollMessage) GetPollKind() int32 {
	if x != nil {
		return x.PollKind
	}
	return 0
}

// @WebcastQuestionNewMessage
type WebcastQuestionNewMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *Common                                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Details *WebcastQuestionNewMessage_QuestionDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *WebcastQuestionNewMessage) Reset() {
	*x = WebcastQuestionNewMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastQuestionNewMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastQuestionNewMessage) ProtoMessage() {}

func (x *WebcastQuestionNewMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastQuestionNewMessage.ProtoReflect.Descriptor instead.
func (*WebcastQuestionNewMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{21}
}

func (x *WebcastQuestionNewMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastQuestionNewMessage) GetDetails() *WebcastQuestionNewMessage_QuestionDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// @WebcastRankTextMessage
type WebcastRankTextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common               *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Scene                int32   `protobuf:"varint,2,opt,name=scene,proto3" json:"scene,omitempty"`
	OwnerIdxBeforeUpdate int64   `protobuf:"varint,3,opt,name=ownerIdxBeforeUpdate,proto3" json:"ownerIdxBeforeUpdate,omitempty"`
	OwnerIdxAfterUpdate  int64   `protobuf:"varint,4,opt,name=ownerIdxAfterUpdate,proto3" json:"ownerIdxAfterUpdate,omitempty"`
	SelfGetBadgeMsg      *Text   `protobuf:"bytes,5,opt,name=selfGetBadgeMsg,proto3" json:"selfGetBadgeMsg,omitempty"`
	OtherGetBadgeMsg     *Text   `protobuf:"bytes,6,opt,name=otherGetBadgeMsg,proto3" json:"otherGetBadgeMsg,omitempty"`
	CurUserId            int64   `protobuf:"varint,7,opt,name=curUserId,proto3" json:"curUserId,omitempty"`
}

func (x *WebcastRankTextMessage) Reset() {
	*x = WebcastRankTextMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastRankTextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastRankTextMessage) ProtoMessage() {}

func (x *WebcastRankTextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastRankTextMessage.ProtoReflect.Descriptor instead.
func (*WebcastRankTextMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{22}
}

func (x *WebcastRankTextMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastRankTextMessage) GetScene() int32 {
	if x != nil {
		return x.Scene
	}
	return 0
}

func (x *WebcastRankTextMessage) GetOwnerIdxBeforeUpdate() int64 {
	if x != nil {
		return x.OwnerIdxBeforeUpdate
	}
	return 0
}

func (x *WebcastRankTextMessage) GetOwnerIdxAfterUpdate() int64 {
	if x != nil {
		return x.OwnerIdxAfterUpdate
	}
	return 0
}

func (x *WebcastRankTextMessage) GetSelfGetBadgeMsg() *Text {
	if x != nil {
		return x.SelfGetBadgeMsg
	}
	return nil
}

func (x *WebcastRankTextMessage) GetOtherGetBadgeMsg() *Text {
	if x != nil {
		return x.OtherGetBadgeMsg
	}
	return nil
}

func (x *WebcastRankTextMessage) GetCurUserId() int64 {
	if x != nil {
		return x.CurUserId
	}
	return 0
}

// @WebcastHourlyRankMessage
type WebcastHourlyRankMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *Common                                 `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Data   *WebcastHourlyRankMessage_RankContainer `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Data2  uint32                                  `protobuf:"varint,3,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *WebcastHourlyRankMessage) Reset() {
	*x = WebcastHourlyRankMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastHourlyRankMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastHourlyRankMessage) ProtoMessage() {}

func (x *WebcastHourlyRankMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastHourlyRankMessage.ProtoReflect.Descriptor instead.
func (*WebcastHourlyRankMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{23}
}

func (x *WebcastHourlyRankMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastHourlyRankMessage) GetData() *WebcastHourlyRankMessage_RankContainer {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WebcastHourlyRankMessage) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

// @WebcastLinkMicArmies
type WebcastLinkMicArmies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common       *Common               `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Id           uint64                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	BattleItems  []*LinkMicArmiesItems `protobuf:"bytes,3,rep,name=battleItems,proto3" json:"battleItems,omitempty"`
	Id2          uint64                `protobuf:"varint,4,opt,name=id2,proto3" json:"id2,omitempty"`
	TimeStamp1   uint64                `protobuf:"varint,5,opt,name=timeStamp1,proto3" json:"timeStamp1,omitempty"`
	TimeStamp2   uint64                `protobuf:"varint,6,opt,name=timeStamp2,proto3" json:"timeStamp2,omitempty"`
	BattleStatus int32                 `protobuf:"varint,7,opt,name=battleStatus,proto3" json:"battleStatus,omitempty"` // SHOULD BE AN ENUM
	Data1        uint64                `protobuf:"varint,8,opt,name=data1,proto3" json:"data1,omitempty"`
	Data2        uint64                `protobuf:"varint,9,opt,name=data2,proto3" json:"data2,omitempty"`
	Data3        uint32                `protobuf:"varint,10,opt,name=data3,proto3" json:"data3,omitempty"`
	Image        *Image                `protobuf:"bytes,11,opt,name=Image,proto3" json:"Image,omitempty"`
	Data4        uint32                `protobuf:"varint,12,opt,name=data4,proto3" json:"data4,omitempty"`
	Data5        uint32                `protobuf:"varint,13,opt,name=data5,proto3" json:"data5,omitempty"`
}

func (x *WebcastLinkMicArmies) Reset() {
	*x = WebcastLinkMicArmies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicArmies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicArmies) ProtoMessage() {}

func (x *WebcastLinkMicArmies) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicArmies.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicArmies) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{24}
}

func (x *WebcastLinkMicArmies) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastLinkMicArmies) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebcastLinkMicArmies) GetBattleItems() []*LinkMicArmiesItems {
	if x != nil {
		return x.BattleItems
	}
	return nil
}

func (x *WebcastLinkMicArmies) GetId2() uint64 {
	if x != nil {
		return x.Id2
	}
	return 0
}

func (x *WebcastLinkMicArmies) GetTimeStamp1() uint64 {
	if x != nil {
		return x.TimeStamp1
	}
	return 0
}

func (x *WebcastLinkMicArmies) GetTimeStamp2() uint64 {
	if x != nil {
		return x.TimeStamp2
	}
	return 0
}

func (x *WebcastLinkMicArmies) GetBattleStatus() int32 {
	if x != nil {
		return x.BattleStatus
	}
	return 0
}

func (x *WebcastLinkMicArmies) GetData1() uint64 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *WebcastLinkMicArmies) GetData2() uint64 {
	if x != nil {
		return x.Data2
	}
	return 0
}

func (x *WebcastLinkMicArmies) GetData3() uint32 {
	if x != nil {
		return x.Data3
	}
	return 0
}

func (x *WebcastLinkMicArmies) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *WebcastLinkMicArmies) GetData4() uint32 {
	if x != nil {
		return x.Data4
	}
	return 0
}

func (x *WebcastLinkMicArmies) GetData5() uint32 {
	if x != nil {
		return x.Data5
	}
	return 0
}

// @WebcastLinkMicBattlePunishFinish
type WebcastLinkMicBattlePunishFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Common                                                         `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Id1       uint64                                                          `protobuf:"varint,2,opt,name=Id1,proto3" json:"Id1,omitempty"`
	Timestamp uint64                                                          `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Data4     uint32                                                          `protobuf:"varint,4,opt,name=Data4,proto3" json:"Data4,omitempty"`
	Id2       uint64                                                          `protobuf:"varint,5,opt,name=Id2,proto3" json:"Id2,omitempty"`
	Data6     *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData `protobuf:"bytes,6,opt,name=Data6,proto3" json:"Data6,omitempty"`
}

func (x *WebcastLinkMicBattlePunishFinish) Reset() {
	*x = WebcastLinkMicBattlePunishFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicBattlePunishFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicBattlePunishFinish) ProtoMessage() {}

func (x *WebcastLinkMicBattlePunishFinish) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicBattlePunishFinish.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicBattlePunishFinish) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{25}
}

func (x *WebcastLinkMicBattlePunishFinish) GetHeader() *Common {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WebcastLinkMicBattlePunishFinish) GetId1() uint64 {
	if x != nil {
		return x.Id1
	}
	return 0
}

func (x *WebcastLinkMicBattlePunishFinish) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WebcastLinkMicBattlePunishFinish) GetData4() uint32 {
	if x != nil {
		return x.Data4
	}
	return 0
}

func (x *WebcastLinkMicBattlePunishFinish) GetId2() uint64 {
	if x != nil {
		return x.Id2
	}
	return 0
}

func (x *WebcastLinkMicBattlePunishFinish) GetData6() *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData {
	if x != nil {
		return x.Data6
	}
	return nil
}

// @WebcastLinkmicBattleTaskMessage
type WebcastLinkmicBattleTaskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Common                                                 `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Data2  uint32                                                  `protobuf:"varint,2,opt,name=Data2,proto3" json:"Data2,omitempty"`
	Data3  *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData  `protobuf:"bytes,3,opt,name=Data3,proto3" json:"Data3,omitempty"`
	Data5  *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2 `protobuf:"bytes,5,opt,name=Data5,proto3" json:"Data5,omitempty"`
}

func (x *WebcastLinkmicBattleTaskMessage) Reset() {
	*x = WebcastLinkmicBattleTaskMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkmicBattleTaskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkmicBattleTaskMessage) ProtoMessage() {}

func (x *WebcastLinkmicBattleTaskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkmicBattleTaskMessage.ProtoReflect.Descriptor instead.
func (*WebcastLinkmicBattleTaskMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{26}
}

func (x *WebcastLinkmicBattleTaskMessage) GetHeader() *Common {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WebcastLinkmicBattleTaskMessage) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

func (x *WebcastLinkmicBattleTaskMessage) GetData3() *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData {
	if x != nil {
		return x.Data3
	}
	return nil
}

func (x *WebcastLinkmicBattleTaskMessage) GetData5() *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2 {
	if x != nil {
		return x.Data5
	}
	return nil
}

// @WebcastLinkMicBattle
type WebcastLinkMicBattle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common       *Common                                       `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Id           uint64                                        `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	BattleConfig *WebcastLinkMicBattle_LinkMicBattleConfig     `protobuf:"bytes,3,opt,name=battleConfig,proto3" json:"battleConfig,omitempty"`
	Data2        uint32                                        `protobuf:"varint,4,opt,name=data2,proto3" json:"data2,omitempty"`
	Details      []*WebcastLinkMicBattle_LinkMicBattleDetails  `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty"`
	Teams1       []*WebcastLinkMicBattle_LinkMicBattleTeam     `protobuf:"bytes,9,rep,name=teams1,proto3" json:"teams1,omitempty"`
	Teams2       []*WebcastLinkMicBattle_LinkMicBattleTeam     `protobuf:"bytes,10,rep,name=teams2,proto3" json:"teams2,omitempty"`
	TeamData     []*WebcastLinkMicBattle_LinkMicBattleTeamData `protobuf:"bytes,13,rep,name=teamData,proto3" json:"teamData,omitempty"`
}

func (x *WebcastLinkMicBattle) Reset() {
	*x = WebcastLinkMicBattle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicBattle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicBattle) ProtoMessage() {}

func (x *WebcastLinkMicBattle) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicBattle.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicBattle) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{27}
}

func (x *WebcastLinkMicBattle) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastLinkMicBattle) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebcastLinkMicBattle) GetBattleConfig() *WebcastLinkMicBattle_LinkMicBattleConfig {
	if x != nil {
		return x.BattleConfig
	}
	return nil
}

func (x *WebcastLinkMicBattle) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

func (x *WebcastLinkMicBattle) GetDetails() []*WebcastLinkMicBattle_LinkMicBattleDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *WebcastLinkMicBattle) GetTeams1() []*WebcastLinkMicBattle_LinkMicBattleTeam {
	if x != nil {
		return x.Teams1
	}
	return nil
}

func (x *WebcastLinkMicBattle) GetTeams2() []*WebcastLinkMicBattle_LinkMicBattleTeam {
	if x != nil {
		return x.Teams2
	}
	return nil
}

func (x *WebcastLinkMicBattle) GetTeamData() []*WebcastLinkMicBattle_LinkMicBattleTeamData {
	if x != nil {
		return x.TeamData
	}
	return nil
}

// @WebcastLinkMicFanTicketMethod
type WebcastLinkMicFanTicketMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common              *Common                     `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	FanTicketRoomNotice *FanTicketRoomNoticeContent `protobuf:"bytes,2,opt,name=FanTicketRoomNotice,proto3" json:"FanTicketRoomNotice,omitempty"`
}

func (x *WebcastLinkMicFanTicketMethod) Reset() {
	*x = WebcastLinkMicFanTicketMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicFanTicketMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicFanTicketMethod) ProtoMessage() {}

func (x *WebcastLinkMicFanTicketMethod) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicFanTicketMethod.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicFanTicketMethod) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{28}
}

func (x *WebcastLinkMicFanTicketMethod) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastLinkMicFanTicketMethod) GetFanTicketRoomNotice() *FanTicketRoomNoticeContent {
	if x != nil {
		return x.FanTicketRoomNotice
	}
	return nil
}

// @WebcastLinkMicMethod
type WebcastLinkMicMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                *Common     `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	MessageType           MessageType `protobuf:"varint,2,opt,name=messageType,proto3,enum=tiktok_hack.MessageType" json:"messageType,omitempty"`
	AccessKey             string      `protobuf:"bytes,3,opt,name=accessKey,proto3" json:"accessKey,omitempty"`
	AnchorLinkmicId       int64       `protobuf:"varint,4,opt,name=anchorLinkmicId,proto3" json:"anchorLinkmicId,omitempty"`
	UserId                int64       `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`
	FanTicket             int64       `protobuf:"varint,6,opt,name=fanTicket,proto3" json:"fanTicket,omitempty"`
	TotalLinkMicFanTicket int64       `protobuf:"varint,7,opt,name=totalLinkMicFanTicket,proto3" json:"totalLinkMicFanTicket,omitempty"`
	ChannelId             int64       `protobuf:"varint,8,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Layout                int64       `protobuf:"varint,9,opt,name=layout,proto3" json:"layout,omitempty"`
	Vendor                int64       `protobuf:"varint,10,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Dimension             int64       `protobuf:"varint,11,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Theme                 string      `protobuf:"bytes,12,opt,name=theme,proto3" json:"theme,omitempty"`
	InviteUid             int64       `protobuf:"varint,13,opt,name=inviteUid,proto3" json:"inviteUid,omitempty"`
}

func (x *WebcastLinkMicMethod) Reset() {
	*x = WebcastLinkMicMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicMethod) ProtoMessage() {}

func (x *WebcastLinkMicMethod) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicMethod.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicMethod) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{29}
}

func (x *WebcastLinkMicMethod) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastLinkMicMethod) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGETYPE_SUBSUCCESS
}

func (x *WebcastLinkMicMethod) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *WebcastLinkMicMethod) GetAnchorLinkmicId() int64 {
	if x != nil {
		return x.AnchorLinkmicId
	}
	return 0
}

func (x *WebcastLinkMicMethod) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WebcastLinkMicMethod) GetFanTicket() int64 {
	if x != nil {
		return x.FanTicket
	}
	return 0
}

func (x *WebcastLinkMicMethod) GetTotalLinkMicFanTicket() int64 {
	if x != nil {
		return x.TotalLinkMicFanTicket
	}
	return 0
}

func (x *WebcastLinkMicMethod) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *WebcastLinkMicMethod) GetLayout() int64 {
	if x != nil {
		return x.Layout
	}
	return 0
}

func (x *WebcastLinkMicMethod) GetVendor() int64 {
	if x != nil {
		return x.Vendor
	}
	return 0
}

func (x *WebcastLinkMicMethod) GetDimension() int64 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *WebcastLinkMicMethod) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *WebcastLinkMicMethod) GetInviteUid() int64 {
	if x != nil {
		return x.InviteUid
	}
	return 0
}

// @WebcastLiveIntroMessage
type WebcastLiveIntroMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common      *Common        `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	RoomId      int64          `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	AuditStatus AuditStatus    `protobuf:"varint,3,opt,name=auditStatus,proto3,enum=tiktok_hack.AuditStatus" json:"auditStatus,omitempty"`
	Content     string         `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Host        *User          `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	IntroMode   int32          `protobuf:"varint,6,opt,name=introMode,proto3" json:"introMode,omitempty"`
	Badges      []*BadgeStruct `protobuf:"bytes,7,rep,name=badges,proto3" json:"badges,omitempty"`
	Language    string         `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *WebcastLiveIntroMessage) Reset() {
	*x = WebcastLiveIntroMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLiveIntroMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLiveIntroMessage) ProtoMessage() {}

func (x *WebcastLiveIntroMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLiveIntroMessage.ProtoReflect.Descriptor instead.
func (*WebcastLiveIntroMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{30}
}

func (x *WebcastLiveIntroMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastLiveIntroMessage) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *WebcastLiveIntroMessage) GetAuditStatus() AuditStatus {
	if x != nil {
		return x.AuditStatus
	}
	return AuditStatus_AUDITSTATUSUNKNOWN
}

func (x *WebcastLiveIntroMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WebcastLiveIntroMessage) GetHost() *User {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *WebcastLiveIntroMessage) GetIntroMode() int32 {
	if x != nil {
		return x.IntroMode
	}
	return 0
}

func (x *WebcastLiveIntroMessage) GetBadges() []*BadgeStruct {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *WebcastLiveIntroMessage) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// @WebcastUnauthorizedMemberMessage
type WebcastUnauthorizedMemberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common         *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Action         int32   `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
	NickNamePrefix *Text   `protobuf:"bytes,3,opt,name=nickNamePrefix,proto3" json:"nickNamePrefix,omitempty"`
	NickName       string  `protobuf:"bytes,4,opt,name=nickName,proto3" json:"nickName,omitempty"`
	EnterText      *Text   `protobuf:"bytes,5,opt,name=enterText,proto3" json:"enterText,omitempty"`
}

func (x *WebcastUnauthorizedMemberMessage) Reset() {
	*x = WebcastUnauthorizedMemberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastUnauthorizedMemberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastUnauthorizedMemberMessage) ProtoMessage() {}

func (x *WebcastUnauthorizedMemberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastUnauthorizedMemberMessage.ProtoReflect.Descriptor instead.
func (*WebcastUnauthorizedMemberMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{31}
}

func (x *WebcastUnauthorizedMemberMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastUnauthorizedMemberMessage) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *WebcastUnauthorizedMemberMessage) GetNickNamePrefix() *Text {
	if x != nil {
		return x.NickNamePrefix
	}
	return nil
}

func (x *WebcastUnauthorizedMemberMessage) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *WebcastUnauthorizedMemberMessage) GetEnterText() *Text {
	if x != nil {
		return x.EnterText
	}
	return nil
}

// @WebcastMsgDetectMessage
type WebcastMsgDetectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common           *Common                                   `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	DetectType       int32                                     `protobuf:"varint,2,opt,name=detectType,proto3" json:"detectType,omitempty"` // Possibly an Enum?
	TriggerCondition *WebcastMsgDetectMessage_TriggerCondition `protobuf:"bytes,3,opt,name=triggerCondition,proto3" json:"triggerCondition,omitempty"`
	TimeInfo         *WebcastMsgDetectMessage_TimeInfo         `protobuf:"bytes,4,opt,name=timeInfo,proto3" json:"timeInfo,omitempty"`
	TriggerBy        int32                                     `protobuf:"varint,5,opt,name=triggerBy,proto3" json:"triggerBy,omitempty"` // Possible an Enum?
	FromRegion       string                                    `protobuf:"bytes,6,opt,name=fromRegion,proto3" json:"fromRegion,omitempty"`
}

func (x *WebcastMsgDetectMessage) Reset() {
	*x = WebcastMsgDetectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastMsgDetectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastMsgDetectMessage) ProtoMessage() {}

func (x *WebcastMsgDetectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastMsgDetectMessage.ProtoReflect.Descriptor instead.
func (*WebcastMsgDetectMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{32}
}

func (x *WebcastMsgDetectMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastMsgDetectMessage) GetDetectType() int32 {
	if x != nil {
		return x.DetectType
	}
	return 0
}

func (x *WebcastMsgDetectMessage) GetTriggerCondition() *WebcastMsgDetectMessage_TriggerCondition {
	if x != nil {
		return x.TriggerCondition
	}
	return nil
}

func (x *WebcastMsgDetectMessage) GetTimeInfo() *WebcastMsgDetectMessage_TimeInfo {
	if x != nil {
		return x.TimeInfo
	}
	return nil
}

func (x *WebcastMsgDetectMessage) GetTriggerBy() int32 {
	if x != nil {
		return x.TriggerBy
	}
	return 0
}

func (x *WebcastMsgDetectMessage) GetFromRegion() string {
	if x != nil {
		return x.FromRegion
	}
	return ""
}

// @WebcastOecLiveShoppingMessage
type WebcastOecLiveShoppingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common      *Common                                            `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Data1       uint32                                             `protobuf:"varint,2,opt,name=data1,proto3" json:"data1,omitempty"`
	ShopData    *WebcastOecLiveShoppingMessage_LiveShoppingData    `protobuf:"bytes,4,opt,name=shopData,proto3" json:"shopData,omitempty"`
	ShopTimings *TimeStampContainer                                `protobuf:"bytes,5,opt,name=shopTimings,proto3" json:"shopTimings,omitempty"` // Uses index 1, 2 & 3
	Details     *WebcastOecLiveShoppingMessage_LiveShoppingDetails `protobuf:"bytes,9,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *WebcastOecLiveShoppingMessage) Reset() {
	*x = WebcastOecLiveShoppingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastOecLiveShoppingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastOecLiveShoppingMessage) ProtoMessage() {}

func (x *WebcastOecLiveShoppingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastOecLiveShoppingMessage.ProtoReflect.Descriptor instead.
func (*WebcastOecLiveShoppingMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{33}
}

func (x *WebcastOecLiveShoppingMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastOecLiveShoppingMessage) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *WebcastOecLiveShoppingMessage) GetShopData() *WebcastOecLiveShoppingMessage_LiveShoppingData {
	if x != nil {
		return x.ShopData
	}
	return nil
}

func (x *WebcastOecLiveShoppingMessage) GetShopTimings() *TimeStampContainer {
	if x != nil {
		return x.ShopTimings
	}
	return nil
}

func (x *WebcastOecLiveShoppingMessage) GetDetails() *WebcastOecLiveShoppingMessage_LiveShoppingDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// @WebcastRoomPinMessage
// Host Pins comment to stream
type WebcastRoomPinMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common          *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	PinnedMessage   []byte  `protobuf:"bytes,2,opt,name=pinnedMessage,proto3" json:"pinnedMessage,omitempty"`      // Usually this is a ChatMessage, but it can also be another message.
	OriginalMsgType string  `protobuf:"bytes,30,opt,name=originalMsgType,proto3" json:"originalMsgType,omitempty"` // Use this Type/Method to Deserialize the PinnedMessage
	Timestamp       uint64  `protobuf:"varint,31,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *WebcastRoomPinMessage) Reset() {
	*x = WebcastRoomPinMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastRoomPinMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastRoomPinMessage) ProtoMessage() {}

func (x *WebcastRoomPinMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastRoomPinMessage.ProtoReflect.Descriptor instead.
func (*WebcastRoomPinMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{34}
}

func (x *WebcastRoomPinMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastRoomPinMessage) GetPinnedMessage() []byte {
	if x != nil {
		return x.PinnedMessage
	}
	return nil
}

func (x *WebcastRoomPinMessage) GetOriginalMsgType() string {
	if x != nil {
		return x.OriginalMsgType
	}
	return ""
}

func (x *WebcastRoomPinMessage) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// @SystemMessage
type WebcastSystemMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common  *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *WebcastSystemMessage) Reset() {
	*x = WebcastSystemMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastSystemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastSystemMessage) ProtoMessage() {}

func (x *WebcastSystemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastSystemMessage.ProtoReflect.Descriptor instead.
func (*WebcastSystemMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{35}
}

func (x *WebcastSystemMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastSystemMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// @WebcastLinkMessage
type WebcastLinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                   *Common                         `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	MessageType              LinkMessageType                 `protobuf:"varint,2,opt,name=MessageType,proto3,enum=tiktok_hack.LinkMessageType" json:"MessageType,omitempty"`
	LinkerId                 int64                           `protobuf:"varint,3,opt,name=LinkerId,proto3" json:"LinkerId,omitempty"`
	Scene                    Scene                           `protobuf:"varint,4,opt,name=Scene,proto3,enum=tiktok_hack.Scene" json:"Scene,omitempty"`
	InviteContent            *LinkerInviteContent            `protobuf:"bytes,5,opt,name=InviteContent,proto3" json:"InviteContent,omitempty"`
	ReplyContent             *LinkerReplyContent             `protobuf:"bytes,6,opt,name=ReplyContent,proto3" json:"ReplyContent,omitempty"`
	CreateContent            *LinkerCreateContent            `protobuf:"bytes,7,opt,name=CreateContent,proto3" json:"CreateContent,omitempty"`
	CloseContent             *LinkerCloseContent             `protobuf:"bytes,8,opt,name=CloseContent,proto3" json:"CloseContent,omitempty"`
	EnterContent             *LinkerEnterContent             `protobuf:"bytes,9,opt,name=EnterContent,proto3" json:"EnterContent,omitempty"`
	LeaveContent             *LinkerLeaveContent             `protobuf:"bytes,10,opt,name=LeaveContent,proto3" json:"LeaveContent,omitempty"`
	CancelContent            *LinkerCancelContent            `protobuf:"bytes,11,opt,name=CancelContent,proto3" json:"CancelContent,omitempty"`
	KickOutContent           *LinkerKickOutContent           `protobuf:"bytes,12,opt,name=KickOutContent,proto3" json:"KickOutContent,omitempty"`
	LinkedListChangeContent  *LinkerLinkedListChangeContent  `protobuf:"bytes,13,opt,name=LinkedListChangeContent,proto3" json:"LinkedListChangeContent,omitempty"`
	UpdateUserContent        *LinkerUpdateUserContent        `protobuf:"bytes,14,opt,name=UpdateUserContent,proto3" json:"UpdateUserContent,omitempty"`
	WaitingListChangeContent *LinkerWaitingListChangeContent `protobuf:"bytes,15,opt,name=WaitingListChangeContent,proto3" json:"WaitingListChangeContent,omitempty"`
	MuteContent              *LinkerMuteContent              `protobuf:"bytes,16,opt,name=MuteContent,proto3" json:"MuteContent,omitempty"`
	RandomMatchContent       *LinkerRandomMatchContent       `protobuf:"bytes,17,opt,name=RandomMatchContent,proto3" json:"RandomMatchContent,omitempty"`
	UpdateUserSettingContent *LinkerUpdateUserSettingContent `protobuf:"bytes,18,opt,name=UpdateUserSettingContent,proto3" json:"UpdateUserSettingContent,omitempty"`
	MicIdxUpdateContent      *LinkerMicIdxUpdateContent      `protobuf:"bytes,19,opt,name=MicIdxUpdateContent,proto3" json:"MicIdxUpdateContent,omitempty"`
	ListChangeContent        *LinkerListChangeContent        `protobuf:"bytes,20,opt,name=ListChangeContent,proto3" json:"ListChangeContent,omitempty"`
	CohostListChangeContent  *CohostListChangeContent        `protobuf:"bytes,21,opt,name=CohostListChangeContent,proto3" json:"CohostListChangeContent,omitempty"`
	MediaChangeContent       *LinkerMediaChangeContent       `protobuf:"bytes,22,opt,name=MediaChangeContent,proto3" json:"MediaChangeContent,omitempty"`
	ReplyAcceptNoticeContent *LinkerAcceptNoticeContent      `protobuf:"bytes,23,opt,name=ReplyAcceptNoticeContent,proto3" json:"ReplyAcceptNoticeContent,omitempty"`
	SysKickOutContent        *LinkerSysKickOutContent        `protobuf:"bytes,101,opt,name=SysKickOutContent,proto3" json:"SysKickOutContent,omitempty"`
	UserToastContent         *LinkmicUserToastContent        `protobuf:"bytes,102,opt,name=UserToastContent,proto3" json:"UserToastContent,omitempty"`
	Extra                    string                          `protobuf:"bytes,200,opt,name=extra,proto3" json:"extra,omitempty"`
	ExpireTimestamp          int64                           `protobuf:"varint,201,opt,name=expireTimestamp,proto3" json:"expireTimestamp,omitempty"`
	TransferExtra            string                          `protobuf:"bytes,202,opt,name=transferExtra,proto3" json:"transferExtra,omitempty"`
}

func (x *WebcastLinkMessage) Reset() {
	*x = WebcastLinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMessage) ProtoMessage() {}

func (x *WebcastLinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMessage.ProtoReflect.Descriptor instead.
func (*WebcastLinkMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{36}
}

func (x *WebcastLinkMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastLinkMessage) GetMessageType() LinkMessageType {
	if x != nil {
		return x.MessageType
	}
	return LinkMessageType_TPYE_LINKER_UNKNOWN
}

func (x *WebcastLinkMessage) GetLinkerId() int64 {
	if x != nil {
		return x.LinkerId
	}
	return 0
}

func (x *WebcastLinkMessage) GetScene() Scene {
	if x != nil {
		return x.Scene
	}
	return Scene_SCENE_UNKNOWN
}

func (x *WebcastLinkMessage) GetInviteContent() *LinkerInviteContent {
	if x != nil {
		return x.InviteContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetReplyContent() *LinkerReplyContent {
	if x != nil {
		return x.ReplyContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetCreateContent() *LinkerCreateContent {
	if x != nil {
		return x.CreateContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetCloseContent() *LinkerCloseContent {
	if x != nil {
		return x.CloseContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetEnterContent() *LinkerEnterContent {
	if x != nil {
		return x.EnterContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetLeaveContent() *LinkerLeaveContent {
	if x != nil {
		return x.LeaveContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetCancelContent() *LinkerCancelContent {
	if x != nil {
		return x.CancelContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetKickOutContent() *LinkerKickOutContent {
	if x != nil {
		return x.KickOutContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetLinkedListChangeContent() *LinkerLinkedListChangeContent {
	if x != nil {
		return x.LinkedListChangeContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetUpdateUserContent() *LinkerUpdateUserContent {
	if x != nil {
		return x.UpdateUserContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetWaitingListChangeContent() *LinkerWaitingListChangeContent {
	if x != nil {
		return x.WaitingListChangeContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetMuteContent() *LinkerMuteContent {
	if x != nil {
		return x.MuteContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetRandomMatchContent() *LinkerRandomMatchContent {
	if x != nil {
		return x.RandomMatchContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetUpdateUserSettingContent() *LinkerUpdateUserSettingContent {
	if x != nil {
		return x.UpdateUserSettingContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetMicIdxUpdateContent() *LinkerMicIdxUpdateContent {
	if x != nil {
		return x.MicIdxUpdateContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetListChangeContent() *LinkerListChangeContent {
	if x != nil {
		return x.ListChangeContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetCohostListChangeContent() *CohostListChangeContent {
	if x != nil {
		return x.CohostListChangeContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetMediaChangeContent() *LinkerMediaChangeContent {
	if x != nil {
		return x.MediaChangeContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetReplyAcceptNoticeContent() *LinkerAcceptNoticeContent {
	if x != nil {
		return x.ReplyAcceptNoticeContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetSysKickOutContent() *LinkerSysKickOutContent {
	if x != nil {
		return x.SysKickOutContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetUserToastContent() *LinkmicUserToastContent {
	if x != nil {
		return x.UserToastContent
	}
	return nil
}

func (x *WebcastLinkMessage) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *WebcastLinkMessage) GetExpireTimestamp() int64 {
	if x != nil {
		return x.ExpireTimestamp
	}
	return 0
}

func (x *WebcastLinkMessage) GetTransferExtra() string {
	if x != nil {
		return x.TransferExtra
	}
	return ""
}

// @WebcastLinkLayerMessage
type WebcastLinkLayerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                *Common                 `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	MessageType           MessageType             `protobuf:"varint,2,opt,name=messageType,proto3,enum=tiktok_hack.MessageType" json:"messageType,omitempty"` // Enum
	ChannelId             int64                   `protobuf:"varint,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Scene                 Scene                   `protobuf:"varint,4,opt,name=scene,proto3,enum=tiktok_hack.Scene" json:"scene,omitempty"` // Enum
	CreateChannelContent  *CreateChannelContent   `protobuf:"bytes,100,opt,name=createChannelContent,proto3" json:"createChannelContent,omitempty"`
	ListChangeContent     *ListChangeContent      `protobuf:"bytes,102,opt,name=listChangeContent,proto3" json:"listChangeContent,omitempty"`
	InviteContent         *InviteContent          `protobuf:"bytes,103,opt,name=inviteContent,proto3" json:"inviteContent,omitempty"`
	ApplyContent          *ApplyContent           `protobuf:"bytes,104,opt,name=applyContent,proto3" json:"applyContent,omitempty"`
	PermitApplyContent    *PermitApplyContent     `protobuf:"bytes,105,opt,name=permitApplyContent,proto3" json:"permitApplyContent,omitempty"`
	ReplyInviteContent    *ReplyInviteContent     `protobuf:"bytes,106,opt,name=replyInviteContent,proto3" json:"replyInviteContent,omitempty"`
	KickOutContent        *KickOutContent         `protobuf:"bytes,107,opt,name=kickOutContent,proto3" json:"kickOutContent,omitempty"`
	CancelApplyContent    *CancelApplyContent     `protobuf:"bytes,108,opt,name=cancelApplyContent,proto3" json:"cancelApplyContent,omitempty"`
	CancelInviteContent   *CancelInviteContent    `protobuf:"bytes,109,opt,name=cancelInviteContent,proto3" json:"cancelInviteContent,omitempty"`
	LeaveContent          *LeaveContent           `protobuf:"bytes,110,opt,name=leaveContent,proto3" json:"leaveContent,omitempty"`
	FinishContent         *FinishChannelContent   `protobuf:"bytes,111,opt,name=finishContent,proto3" json:"finishContent,omitempty"`
	JoinDirectContent     *JoinDirectContent      `protobuf:"bytes,112,opt,name=joinDirectContent,proto3" json:"joinDirectContent,omitempty"`
	JoinGroupContent      *JoinGroupContent       `protobuf:"bytes,113,opt,name=joinGroupContent,proto3" json:"joinGroupContent,omitempty"`
	PermitGroupContent    *PermitJoinGroupContent `protobuf:"bytes,114,opt,name=permitGroupContent,proto3" json:"permitGroupContent,omitempty"`
	CancelGroupContent    *CancelJoinGroupContent `protobuf:"bytes,115,opt,name=cancelGroupContent,proto3" json:"cancelGroupContent,omitempty"`
	LeaveGroupContent     *LeaveJoinGroupContent  `protobuf:"bytes,116,opt,name=leaveGroupContent,proto3" json:"leaveGroupContent,omitempty"`
	P2PGroupChangeContent *P2PGroupChangeContent  `protobuf:"bytes,117,opt,name=p2pGroupChangeContent,proto3" json:"p2pGroupChangeContent,omitempty"`
	BusinessContent       *BusinessContent        `protobuf:"bytes,200,opt,name=businessContent,proto3" json:"businessContent,omitempty"`
}

func (x *WebcastLinkLayerMessage) Reset() {
	*x = WebcastLinkLayerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkLayerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkLayerMessage) ProtoMessage() {}

func (x *WebcastLinkLayerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkLayerMessage.ProtoReflect.Descriptor instead.
func (*WebcastLinkLayerMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{37}
}

func (x *WebcastLinkLayerMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGETYPE_SUBSUCCESS
}

func (x *WebcastLinkLayerMessage) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *WebcastLinkLayerMessage) GetScene() Scene {
	if x != nil {
		return x.Scene
	}
	return Scene_SCENE_UNKNOWN
}

func (x *WebcastLinkLayerMessage) GetCreateChannelContent() *CreateChannelContent {
	if x != nil {
		return x.CreateChannelContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetListChangeContent() *ListChangeContent {
	if x != nil {
		return x.ListChangeContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetInviteContent() *InviteContent {
	if x != nil {
		return x.InviteContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetApplyContent() *ApplyContent {
	if x != nil {
		return x.ApplyContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetPermitApplyContent() *PermitApplyContent {
	if x != nil {
		return x.PermitApplyContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetReplyInviteContent() *ReplyInviteContent {
	if x != nil {
		return x.ReplyInviteContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetKickOutContent() *KickOutContent {
	if x != nil {
		return x.KickOutContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetCancelApplyContent() *CancelApplyContent {
	if x != nil {
		return x.CancelApplyContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetCancelInviteContent() *CancelInviteContent {
	if x != nil {
		return x.CancelInviteContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetLeaveContent() *LeaveContent {
	if x != nil {
		return x.LeaveContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetFinishContent() *FinishChannelContent {
	if x != nil {
		return x.FinishContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetJoinDirectContent() *JoinDirectContent {
	if x != nil {
		return x.JoinDirectContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetJoinGroupContent() *JoinGroupContent {
	if x != nil {
		return x.JoinGroupContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetPermitGroupContent() *PermitJoinGroupContent {
	if x != nil {
		return x.PermitGroupContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetCancelGroupContent() *CancelJoinGroupContent {
	if x != nil {
		return x.CancelGroupContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetLeaveGroupContent() *LeaveJoinGroupContent {
	if x != nil {
		return x.LeaveGroupContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetP2PGroupChangeContent() *P2PGroupChangeContent {
	if x != nil {
		return x.P2PGroupChangeContent
	}
	return nil
}

func (x *WebcastLinkLayerMessage) GetBusinessContent() *BusinessContent {
	if x != nil {
		return x.BusinessContent
	}
	return nil
}

// @RoomVerifyMessage
type RoomVerifyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common     *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Action     int32   `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
	Content    string  `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	NoticeType int64   `protobuf:"varint,4,opt,name=noticeType,proto3" json:"noticeType,omitempty"`
	CloseRoom  bool    `protobuf:"varint,5,opt,name=closeRoom,proto3" json:"closeRoom,omitempty"`
}

func (x *RoomVerifyMessage) Reset() {
	*x = RoomVerifyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomVerifyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomVerifyMessage) ProtoMessage() {}

func (x *RoomVerifyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomVerifyMessage.ProtoReflect.Descriptor instead.
func (*RoomVerifyMessage) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{38}
}

func (x *RoomVerifyMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *RoomVerifyMessage) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *RoomVerifyMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *RoomVerifyMessage) GetNoticeType() int64 {
	if x != nil {
		return x.NoticeType
	}
	return 0
}

func (x *RoomVerifyMessage) GetCloseRoom() bool {
	if x != nil {
		return x.CloseRoom
	}
	return false
}

// Server-Message. Binary will deserialize into specific message
type WebcastResponse_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method    string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Payload   []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	MsgId     int64  `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
	MsgType   int32  `protobuf:"varint,4,opt,name=msgType,proto3" json:"msgType,omitempty"`
	Offset    int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	IsHistory bool   `protobuf:"varint,6,opt,name=isHistory,proto3" json:"isHistory,omitempty"`
}

func (x *WebcastResponse_Message) Reset() {
	*x = WebcastResponse_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastResponse_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastResponse_Message) ProtoMessage() {}

func (x *WebcastResponse_Message) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastResponse_Message.ProtoReflect.Descriptor instead.
func (*WebcastResponse_Message) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{1, 1}
}

func (x *WebcastResponse_Message) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *WebcastResponse_Message) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *WebcastResponse_Message) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *WebcastResponse_Message) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *WebcastResponse_Message) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WebcastResponse_Message) GetIsHistory() bool {
	if x != nil {
		return x.IsHistory
	}
	return false
}

type WebcastGiftMessage_UserGiftReciever struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	DeviceName string `protobuf:"bytes,10,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *WebcastGiftMessage_UserGiftReciever) Reset() {
	*x = WebcastGiftMessage_UserGiftReciever{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastGiftMessage_UserGiftReciever) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastGiftMessage_UserGiftReciever) ProtoMessage() {}

func (x *WebcastGiftMessage_UserGiftReciever) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastGiftMessage_UserGiftReciever.ProtoReflect.Descriptor instead.
func (*WebcastGiftMessage_UserGiftReciever) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{2, 0}
}

func (x *WebcastGiftMessage_UserGiftReciever) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WebcastGiftMessage_UserGiftReciever) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type WebcastGiftMessage_GiftIMPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueSizesList    []int64 `protobuf:"varint,1,rep,packed,name=queueSizesList,proto3" json:"queueSizesList,omitempty"`
	SelfQueuePriority int64   `protobuf:"varint,2,opt,name=selfQueuePriority,proto3" json:"selfQueuePriority,omitempty"`
	Priority          int64   `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *WebcastGiftMessage_GiftIMPriority) Reset() {
	*x = WebcastGiftMessage_GiftIMPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastGiftMessage_GiftIMPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastGiftMessage_GiftIMPriority) ProtoMessage() {}

func (x *WebcastGiftMessage_GiftIMPriority) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastGiftMessage_GiftIMPriority.ProtoReflect.Descriptor instead.
func (*WebcastGiftMessage_GiftIMPriority) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{2, 1}
}

func (x *WebcastGiftMessage_GiftIMPriority) GetQueueSizesList() []int64 {
	if x != nil {
		return x.QueueSizesList
	}
	return nil
}

func (x *WebcastGiftMessage_GiftIMPriority) GetSelfQueuePriority() int64 {
	if x != nil {
		return x.SelfQueuePriority
	}
	return 0
}

func (x *WebcastGiftMessage_GiftIMPriority) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type WebcastGiftMessage_PublicAreaCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLabel         *Image `protobuf:"bytes,1,opt,name=userLabel,proto3" json:"userLabel,omitempty"`
	UserConsumeInRoom int64  `protobuf:"varint,2,opt,name=userConsumeInRoom,proto3" json:"userConsumeInRoom,omitempty"`
}

func (x *WebcastGiftMessage_PublicAreaCommon) Reset() {
	*x = WebcastGiftMessage_PublicAreaCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastGiftMessage_PublicAreaCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastGiftMessage_PublicAreaCommon) ProtoMessage() {}

func (x *WebcastGiftMessage_PublicAreaCommon) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastGiftMessage_PublicAreaCommon.ProtoReflect.Descriptor instead.
func (*WebcastGiftMessage_PublicAreaCommon) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{2, 2}
}

func (x *WebcastGiftMessage_PublicAreaCommon) GetUserLabel() *Image {
	if x != nil {
		return x.UserLabel
	}
	return nil
}

func (x *WebcastGiftMessage_PublicAreaCommon) GetUserConsumeInRoom() int64 {
	if x != nil {
		return x.UserConsumeInRoom
	}
	return 0
}

type WebcastBarrageMessage_BarrageTypeUserGradeParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGrade  int32  `protobuf:"varint,1,opt,name=currentGrade,proto3" json:"currentGrade,omitempty"`
	DisplayConfig int32  `protobuf:"varint,2,opt,name=displayConfig,proto3" json:"displayConfig,omitempty"`
	UserId        string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	User          *User  `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *WebcastBarrageMessage_BarrageTypeUserGradeParam) Reset() {
	*x = WebcastBarrageMessage_BarrageTypeUserGradeParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastBarrageMessage_BarrageTypeUserGradeParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastBarrageMessage_BarrageTypeUserGradeParam) ProtoMessage() {}

func (x *WebcastBarrageMessage_BarrageTypeUserGradeParam) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastBarrageMessage_BarrageTypeUserGradeParam.ProtoReflect.Descriptor instead.
func (*WebcastBarrageMessage_BarrageTypeUserGradeParam) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{5, 0}
}

func (x *WebcastBarrageMessage_BarrageTypeUserGradeParam) GetCurrentGrade() int32 {
	if x != nil {
		return x.CurrentGrade
	}
	return 0
}

func (x *WebcastBarrageMessage_BarrageTypeUserGradeParam) GetDisplayConfig() int32 {
	if x != nil {
		return x.DisplayConfig
	}
	return 0
}

func (x *WebcastBarrageMessage_BarrageTypeUserGradeParam) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WebcastBarrageMessage_BarrageTypeUserGradeParam) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type WebcastBarrageMessage_BarrageTypeFansLevelParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGrade  int32 `protobuf:"varint,1,opt,name=currentGrade,proto3" json:"currentGrade,omitempty"`
	DisplayConfig int32 `protobuf:"varint,2,opt,name=displayConfig,proto3" json:"displayConfig,omitempty"`
	User          *User `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *WebcastBarrageMessage_BarrageTypeFansLevelParam) Reset() {
	*x = WebcastBarrageMessage_BarrageTypeFansLevelParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastBarrageMessage_BarrageTypeFansLevelParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastBarrageMessage_BarrageTypeFansLevelParam) ProtoMessage() {}

func (x *WebcastBarrageMessage_BarrageTypeFansLevelParam) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastBarrageMessage_BarrageTypeFansLevelParam.ProtoReflect.Descriptor instead.
func (*WebcastBarrageMessage_BarrageTypeFansLevelParam) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{5, 1}
}

func (x *WebcastBarrageMessage_BarrageTypeFansLevelParam) GetCurrentGrade() int32 {
	if x != nil {
		return x.CurrentGrade
	}
	return 0
}

func (x *WebcastBarrageMessage_BarrageTypeFansLevelParam) GetDisplayConfig() int32 {
	if x != nil {
		return x.DisplayConfig
	}
	return 0
}

func (x *WebcastBarrageMessage_BarrageTypeFansLevelParam) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type WebcastBarrageMessage_BarrageTypeSubscribeGiftParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GiftSubCount     int64 `protobuf:"varint,1,opt,name=giftSubCount,proto3" json:"giftSubCount,omitempty"`
	ShowGiftSubCount bool  `protobuf:"varint,2,opt,name=showGiftSubCount,proto3" json:"showGiftSubCount,omitempty"`
}

func (x *WebcastBarrageMessage_BarrageTypeSubscribeGiftParam) Reset() {
	*x = WebcastBarrageMessage_BarrageTypeSubscribeGiftParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastBarrageMessage_BarrageTypeSubscribeGiftParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastBarrageMessage_BarrageTypeSubscribeGiftParam) ProtoMessage() {}

func (x *WebcastBarrageMessage_BarrageTypeSubscribeGiftParam) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastBarrageMessage_BarrageTypeSubscribeGiftParam.ProtoReflect.Descriptor instead.
func (*WebcastBarrageMessage_BarrageTypeSubscribeGiftParam) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{5, 2}
}

func (x *WebcastBarrageMessage_BarrageTypeSubscribeGiftParam) GetGiftSubCount() int64 {
	if x != nil {
		return x.GiftSubCount
	}
	return 0
}

func (x *WebcastBarrageMessage_BarrageTypeSubscribeGiftParam) GetShowGiftSubCount() bool {
	if x != nil {
		return x.ShowGiftSubCount
	}
	return false
}

type WebcastBarrageMessage_BarrageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName string `protobuf:"bytes,1,opt,name=eventName,proto3" json:"eventName,omitempty"`
}

func (x *WebcastBarrageMessage_BarrageEvent) Reset() {
	*x = WebcastBarrageMessage_BarrageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastBarrageMessage_BarrageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastBarrageMessage_BarrageEvent) ProtoMessage() {}

func (x *WebcastBarrageMessage_BarrageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastBarrageMessage_BarrageEvent.ProtoReflect.Descriptor instead.
func (*WebcastBarrageMessage_BarrageEvent) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{5, 3}
}

func (x *WebcastBarrageMessage_BarrageEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

type WebcastCaptionMessage_CaptionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Text     string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *WebcastCaptionMessage_CaptionData) Reset() {
	*x = WebcastCaptionMessage_CaptionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastCaptionMessage_CaptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastCaptionMessage_CaptionData) ProtoMessage() {}

func (x *WebcastCaptionMessage_CaptionData) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastCaptionMessage_CaptionData.ProtoReflect.Descriptor instead.
func (*WebcastCaptionMessage_CaptionData) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{6, 0}
}

func (x *WebcastCaptionMessage_CaptionData) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *WebcastCaptionMessage_CaptionData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// @EmoteWithIndex
// proto.webcast.im.ChatMessage
type WebcastChatMessage_EmoteWithIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Emote *Emote `protobuf:"bytes,2,opt,name=emote,proto3" json:"emote,omitempty"`
}

func (x *WebcastChatMessage_EmoteWithIndex) Reset() {
	*x = WebcastChatMessage_EmoteWithIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastChatMessage_EmoteWithIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastChatMessage_EmoteWithIndex) ProtoMessage() {}

func (x *WebcastChatMessage_EmoteWithIndex) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastChatMessage_EmoteWithIndex.ProtoReflect.Descriptor instead.
func (*WebcastChatMessage_EmoteWithIndex) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{7, 1}
}

func (x *WebcastChatMessage_EmoteWithIndex) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *WebcastChatMessage_EmoteWithIndex) GetEmote() *Emote {
	if x != nil {
		return x.Emote
	}
	return nil
}

// @Extra
// proto.webcast.im.ControlMessage
type WebcastControlMessage_Extra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanInfoUrl      string `protobuf:"bytes,1,opt,name=banInfoUrl,proto3" json:"banInfoUrl,omitempty"`
	ReasonNo        int64  `protobuf:"varint,2,opt,name=reasonNo,proto3" json:"reasonNo,omitempty"`
	Title           *Text  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	ViolationReason *Text  `protobuf:"bytes,4,opt,name=violationReason,proto3" json:"violationReason,omitempty"`
	Content         *Text  `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	GotItButton     *Text  `protobuf:"bytes,6,opt,name=gotItButton,proto3" json:"gotItButton,omitempty"`
	BanDetailButton *Text  `protobuf:"bytes,7,opt,name=banDetailButton,proto3" json:"banDetailButton,omitempty"`
	Source          string `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *WebcastControlMessage_Extra) Reset() {
	*x = WebcastControlMessage_Extra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastControlMessage_Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastControlMessage_Extra) ProtoMessage() {}

func (x *WebcastControlMessage_Extra) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastControlMessage_Extra.ProtoReflect.Descriptor instead.
func (*WebcastControlMessage_Extra) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{8, 0}
}

func (x *WebcastControlMessage_Extra) GetBanInfoUrl() string {
	if x != nil {
		return x.BanInfoUrl
	}
	return ""
}

func (x *WebcastControlMessage_Extra) GetReasonNo() int64 {
	if x != nil {
		return x.ReasonNo
	}
	return 0
}

func (x *WebcastControlMessage_Extra) GetTitle() *Text {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *WebcastControlMessage_Extra) GetViolationReason() *Text {
	if x != nil {
		return x.ViolationReason
	}
	return nil
}

func (x *WebcastControlMessage_Extra) GetContent() *Text {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *WebcastControlMessage_Extra) GetGotItButton() *Text {
	if x != nil {
		return x.GotItButton
	}
	return nil
}

func (x *WebcastControlMessage_Extra) GetBanDetailButton() *Text {
	if x != nil {
		return x.BanDetailButton
	}
	return nil
}

func (x *WebcastControlMessage_Extra) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// @EnvelopeInfo
// proto.webcast.im.EnvelopeMessage
type WebcastEnvelopeMessage_EnvelopeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvelopeId       string                   `protobuf:"bytes,1,opt,name=envelopeId,proto3" json:"envelopeId,omitempty"`
	BusinessType     EnvelopeBusinessType     `protobuf:"varint,2,opt,name=businessType,proto3,enum=tiktok_hack.EnvelopeBusinessType" json:"businessType,omitempty"`
	EnvelopeIdc      string                   `protobuf:"bytes,3,opt,name=envelopeIdc,proto3" json:"envelopeIdc,omitempty"`
	SendUserName     string                   `protobuf:"bytes,4,opt,name=sendUserName,proto3" json:"sendUserName,omitempty"`
	DiamondCount     int32                    `protobuf:"varint,5,opt,name=diamondCount,proto3" json:"diamondCount,omitempty"`
	PeopleCount      int32                    `protobuf:"varint,6,opt,name=peopleCount,proto3" json:"peopleCount,omitempty"`
	UnpackAt         int32                    `protobuf:"varint,7,opt,name=unpackAt,proto3" json:"unpackAt,omitempty"`
	SendUserId       string                   `protobuf:"bytes,8,opt,name=sendUserId,proto3" json:"sendUserId,omitempty"`
	SendUserAvatar   *Image                   `protobuf:"bytes,9,opt,name=sendUserAvatar,proto3" json:"sendUserAvatar,omitempty"`
	CreateAt         string                   `protobuf:"bytes,10,opt,name=createAt,proto3" json:"createAt,omitempty"`
	RoomId           string                   `protobuf:"bytes,11,opt,name=roomId,proto3" json:"roomId,omitempty"`
	FollowShowStatus EnvelopeFollowShowStatus `protobuf:"varint,12,opt,name=followShowStatus,proto3,enum=tiktok_hack.EnvelopeFollowShowStatus" json:"followShowStatus,omitempty"` // @warning Enum not found, should be FollowShowStatus
	SkinId           int32                    `protobuf:"varint,13,opt,name=skinId,proto3" json:"skinId,omitempty"`
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) Reset() {
	*x = WebcastEnvelopeMessage_EnvelopeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastEnvelopeMessage_EnvelopeInfo) ProtoMessage() {}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastEnvelopeMessage_EnvelopeInfo.ProtoReflect.Descriptor instead.
func (*WebcastEnvelopeMessage_EnvelopeInfo) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{10, 0}
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetEnvelopeId() string {
	if x != nil {
		return x.EnvelopeId
	}
	return ""
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetBusinessType() EnvelopeBusinessType {
	if x != nil {
		return x.BusinessType
	}
	return EnvelopeBusinessType_BusinessTypeUnknown
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetEnvelopeIdc() string {
	if x != nil {
		return x.EnvelopeIdc
	}
	return ""
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetSendUserName() string {
	if x != nil {
		return x.SendUserName
	}
	return ""
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetDiamondCount() int32 {
	if x != nil {
		return x.DiamondCount
	}
	return 0
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetPeopleCount() int32 {
	if x != nil {
		return x.PeopleCount
	}
	return 0
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetUnpackAt() int32 {
	if x != nil {
		return x.UnpackAt
	}
	return 0
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetSendUserId() string {
	if x != nil {
		return x.SendUserId
	}
	return ""
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetSendUserAvatar() *Image {
	if x != nil {
		return x.SendUserAvatar
	}
	return nil
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetFollowShowStatus() EnvelopeFollowShowStatus {
	if x != nil {
		return x.FollowShowStatus
	}
	return EnvelopeFollowShowStatus_EnvelopeFollowShowUnknown
}

func (x *WebcastEnvelopeMessage_EnvelopeInfo) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

// @Contributor
type WebcastRoomUserSeqMessage_Contributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score int32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	User  *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Rank  int32 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Delta int64 `protobuf:"varint,4,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *WebcastRoomUserSeqMessage_Contributor) Reset() {
	*x = WebcastRoomUserSeqMessage_Contributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastRoomUserSeqMessage_Contributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastRoomUserSeqMessage_Contributor) ProtoMessage() {}

func (x *WebcastRoomUserSeqMessage_Contributor) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastRoomUserSeqMessage_Contributor.ProtoReflect.Descriptor instead.
func (*WebcastRoomUserSeqMessage_Contributor) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{15, 0}
}

func (x *WebcastRoomUserSeqMessage_Contributor) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *WebcastRoomUserSeqMessage_Contributor) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebcastRoomUserSeqMessage_Contributor) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *WebcastRoomUserSeqMessage_Contributor) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type WebcastRankUpdateMessage_RankTabInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType     int64  `protobuf:"varint,1,opt,name=rankType,proto3" json:"rankType,omitempty"` // @warning Enum not found, should be RankType
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	TitleText    *Text  `protobuf:"bytes,3,opt,name=titleText,proto3" json:"titleText,omitempty"`
	ListLynxType int64  `protobuf:"varint,4,opt,name=listLynxType,proto3" json:"listLynxType,omitempty"`
}

func (x *WebcastRankUpdateMessage_RankTabInfo) Reset() {
	*x = WebcastRankUpdateMessage_RankTabInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastRankUpdateMessage_RankTabInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastRankUpdateMessage_RankTabInfo) ProtoMessage() {}

func (x *WebcastRankUpdateMessage_RankTabInfo) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastRankUpdateMessage_RankTabInfo.ProtoReflect.Descriptor instead.
func (*WebcastRankUpdateMessage_RankTabInfo) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{18, 0}
}

func (x *WebcastRankUpdateMessage_RankTabInfo) GetRankType() int64 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *WebcastRankUpdateMessage_RankTabInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WebcastRankUpdateMessage_RankTabInfo) GetTitleText() *Text {
	if x != nil {
		return x.TitleText
	}
	return nil
}

func (x *WebcastRankUpdateMessage_RankTabInfo) GetListLynxType() int64 {
	if x != nil {
		return x.ListLynxType
	}
	return 0
}

// @RankUpdate
// proto.webcast.im.RankUpdateMessage
type WebcastRankUpdateMessage_RankUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType              int64 `protobuf:"varint,1,opt,name=rankType,proto3" json:"rankType,omitempty"` // @warning Enum not found, should be RankType
	OwnerRank             int64 `protobuf:"varint,2,opt,name=ownerRank,proto3" json:"ownerRank,omitempty"`
	DefaultContent        *Text `protobuf:"bytes,3,opt,name=defaultContent,proto3" json:"defaultContent,omitempty"`
	ShowEntranceAnimation bool  `protobuf:"varint,5,opt,name=showEntranceAnimation,proto3" json:"showEntranceAnimation,omitempty"`
	Countdown             int64 `protobuf:"varint,6,opt,name=countdown,proto3" json:"countdown,omitempty"`
	RelatedTabRankType    int64 `protobuf:"varint,8,opt,name=relatedTabRankType,proto3" json:"relatedTabRankType,omitempty"`     // @warning Enum not found, should be RelatedTabRankType
	RequestFirstShowType  int64 `protobuf:"varint,9,opt,name=requestFirstShowType,proto3" json:"requestFirstShowType,omitempty"` // @warning Enum not found, should be RequestFirstShowType
	SupportedVersion      int64 `protobuf:"varint,10,opt,name=supportedVersion,proto3" json:"supportedVersion,omitempty"`
	Owneronrank           bool  `protobuf:"varint,11,opt,name=owneronrank,proto3" json:"owneronrank,omitempty"`
}

func (x *WebcastRankUpdateMessage_RankUpdate) Reset() {
	*x = WebcastRankUpdateMessage_RankUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastRankUpdateMessage_RankUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastRankUpdateMessage_RankUpdate) ProtoMessage() {}

func (x *WebcastRankUpdateMessage_RankUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastRankUpdateMessage_RankUpdate.ProtoReflect.Descriptor instead.
func (*WebcastRankUpdateMessage_RankUpdate) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{18, 1}
}

func (x *WebcastRankUpdateMessage_RankUpdate) GetRankType() int64 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *WebcastRankUpdateMessage_RankUpdate) GetOwnerRank() int64 {
	if x != nil {
		return x.OwnerRank
	}
	return 0
}

func (x *WebcastRankUpdateMessage_RankUpdate) GetDefaultContent() *Text {
	if x != nil {
		return x.DefaultContent
	}
	return nil
}

func (x *WebcastRankUpdateMessage_RankUpdate) GetShowEntranceAnimation() bool {
	if x != nil {
		return x.ShowEntranceAnimation
	}
	return false
}

func (x *WebcastRankUpdateMessage_RankUpdate) GetCountdown() int64 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

func (x *WebcastRankUpdateMessage_RankUpdate) GetRelatedTabRankType() int64 {
	if x != nil {
		return x.RelatedTabRankType
	}
	return 0
}

func (x *WebcastRankUpdateMessage_RankUpdate) GetRequestFirstShowType() int64 {
	if x != nil {
		return x.RequestFirstShowType
	}
	return 0
}

func (x *WebcastRankUpdateMessage_RankUpdate) GetSupportedVersion() int64 {
	if x != nil {
		return x.SupportedVersion
	}
	return 0
}

func (x *WebcastRankUpdateMessage_RankUpdate) GetOwneronrank() bool {
	if x != nil {
		return x.Owneronrank
	}
	return false
}

// @EffectConfig
// proto.webcast.im.MemberMessage
// C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
type WebcastMemberMessage_EffectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 int64   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Icon                 *Image  `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	AvatarPos            int64   `protobuf:"varint,3,opt,name=avatarPos,proto3" json:"avatarPos,omitempty"`
	Text                 *Text   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	TextIcon             *Image  `protobuf:"bytes,5,opt,name=textIcon,proto3" json:"textIcon,omitempty"`
	StayTime             int32   `protobuf:"varint,6,opt,name=stayTime,proto3" json:"stayTime,omitempty"`
	AnimAssetId          int64   `protobuf:"varint,7,opt,name=animAssetId,proto3" json:"animAssetId,omitempty"`
	Badge                *Image  `protobuf:"bytes,8,opt,name=badge,proto3" json:"badge,omitempty"`
	FlexSettingArrayList []int64 `protobuf:"varint,9,rep,packed,name=flexSettingArrayList,proto3" json:"flexSettingArrayList,omitempty"`
}

func (x *WebcastMemberMessage_EffectConfig) Reset() {
	*x = WebcastMemberMessage_EffectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastMemberMessage_EffectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastMemberMessage_EffectConfig) ProtoMessage() {}

func (x *WebcastMemberMessage_EffectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastMemberMessage_EffectConfig.ProtoReflect.Descriptor instead.
func (*WebcastMemberMessage_EffectConfig) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{19, 0}
}

func (x *WebcastMemberMessage_EffectConfig) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *WebcastMemberMessage_EffectConfig) GetIcon() *Image {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *WebcastMemberMessage_EffectConfig) GetAvatarPos() int64 {
	if x != nil {
		return x.AvatarPos
	}
	return 0
}

func (x *WebcastMemberMessage_EffectConfig) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *WebcastMemberMessage_EffectConfig) GetTextIcon() *Image {
	if x != nil {
		return x.TextIcon
	}
	return nil
}

func (x *WebcastMemberMessage_EffectConfig) GetStayTime() int32 {
	if x != nil {
		return x.StayTime
	}
	return 0
}

func (x *WebcastMemberMessage_EffectConfig) GetAnimAssetId() int64 {
	if x != nil {
		return x.AnimAssetId
	}
	return 0
}

func (x *WebcastMemberMessage_EffectConfig) GetBadge() *Image {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *WebcastMemberMessage_EffectConfig) GetFlexSettingArrayList() []int64 {
	if x != nil {
		return x.FlexSettingArrayList
	}
	return nil
}

type WebcastQuestionNewMessage_QuestionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text      string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	TimeStamp uint64 `protobuf:"varint,4,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	User      *User  `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Data1     uint32 `protobuf:"varint,20,opt,name=data1,proto3" json:"data1,omitempty"`
}

func (x *WebcastQuestionNewMessage_QuestionDetails) Reset() {
	*x = WebcastQuestionNewMessage_QuestionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastQuestionNewMessage_QuestionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastQuestionNewMessage_QuestionDetails) ProtoMessage() {}

func (x *WebcastQuestionNewMessage_QuestionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastQuestionNewMessage_QuestionDetails.ProtoReflect.Descriptor instead.
func (*WebcastQuestionNewMessage_QuestionDetails) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{21, 0}
}

func (x *WebcastQuestionNewMessage_QuestionDetails) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebcastQuestionNewMessage_QuestionDetails) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *WebcastQuestionNewMessage_QuestionDetails) GetTimeStamp() uint64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *WebcastQuestionNewMessage_QuestionDetails) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebcastQuestionNewMessage_QuestionDetails) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

type WebcastHourlyRankMessage_RankContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1        uint32                                               `protobuf:"varint,1,opt,name=data1,proto3" json:"data1,omitempty"`
	Rankingdata  *WebcastHourlyRankMessage_RankContainer_RankingData  `protobuf:"bytes,2,opt,name=rankingdata,proto3" json:"rankingdata,omitempty"`
	Data2        uint32                                               `protobuf:"varint,3,opt,name=data2,proto3" json:"data2,omitempty"`
	Rankings     *Ranking                                             `protobuf:"bytes,4,opt,name=rankings,proto3" json:"rankings,omitempty"`
	Rankingdata2 *WebcastHourlyRankMessage_RankContainer_RankingData2 `protobuf:"bytes,5,opt,name=rankingdata2,proto3" json:"rankingdata2,omitempty"`
	Data3        uint32                                               `protobuf:"varint,6,opt,name=data3,proto3" json:"data3,omitempty"`
	Data4        uint32                                               `protobuf:"varint,7,opt,name=data4,proto3" json:"data4,omitempty"`
}

func (x *WebcastHourlyRankMessage_RankContainer) Reset() {
	*x = WebcastHourlyRankMessage_RankContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastHourlyRankMessage_RankContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastHourlyRankMessage_RankContainer) ProtoMessage() {}

func (x *WebcastHourlyRankMessage_RankContainer) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastHourlyRankMessage_RankContainer.ProtoReflect.Descriptor instead.
func (*WebcastHourlyRankMessage_RankContainer) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{23, 0}
}

func (x *WebcastHourlyRankMessage_RankContainer) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *WebcastHourlyRankMessage_RankContainer) GetRankingdata() *WebcastHourlyRankMessage_RankContainer_RankingData {
	if x != nil {
		return x.Rankingdata
	}
	return nil
}

func (x *WebcastHourlyRankMessage_RankContainer) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

func (x *WebcastHourlyRankMessage_RankContainer) GetRankings() *Ranking {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *WebcastHourlyRankMessage_RankContainer) GetRankingdata2() *WebcastHourlyRankMessage_RankContainer_RankingData2 {
	if x != nil {
		return x.Rankingdata2
	}
	return nil
}

func (x *WebcastHourlyRankMessage_RankContainer) GetData3() uint32 {
	if x != nil {
		return x.Data3
	}
	return 0
}

func (x *WebcastHourlyRankMessage_RankContainer) GetData4() uint32 {
	if x != nil {
		return x.Data4
	}
	return 0
}

type WebcastHourlyRankMessage_RankContainer_RankingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1    uint32   `protobuf:"varint,1,opt,name=data1,proto3" json:"data1,omitempty"`
	Rankdata *Ranking `protobuf:"bytes,2,opt,name=rankdata,proto3" json:"rankdata,omitempty"`
	Data2    string   `protobuf:"bytes,3,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData) Reset() {
	*x = WebcastHourlyRankMessage_RankContainer_RankingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastHourlyRankMessage_RankContainer_RankingData) ProtoMessage() {}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastHourlyRankMessage_RankContainer_RankingData.ProtoReflect.Descriptor instead.
func (*WebcastHourlyRankMessage_RankContainer_RankingData) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{23, 0, 0}
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData) GetRankdata() *Ranking {
	if x != nil {
		return x.Rankdata
	}
	return nil
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData) GetData2() string {
	if x != nil {
		return x.Data2
	}
	return ""
}

type WebcastHourlyRankMessage_RankContainer_RankingData2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1    uint32   `protobuf:"varint,1,opt,name=data1,proto3" json:"data1,omitempty"`
	Data2    uint32   `protobuf:"varint,2,opt,name=data2,proto3" json:"data2,omitempty"`
	Rankdata *Ranking `protobuf:"bytes,3,opt,name=rankdata,proto3" json:"rankdata,omitempty"`
	Data3    string   `protobuf:"bytes,4,opt,name=data3,proto3" json:"data3,omitempty"`
	Data4    uint32   `protobuf:"varint,5,opt,name=data4,proto3" json:"data4,omitempty"`
	Data5    uint32   `protobuf:"varint,6,opt,name=data5,proto3" json:"data5,omitempty"`
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData2) Reset() {
	*x = WebcastHourlyRankMessage_RankContainer_RankingData2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastHourlyRankMessage_RankContainer_RankingData2) ProtoMessage() {}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData2) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastHourlyRankMessage_RankContainer_RankingData2.ProtoReflect.Descriptor instead.
func (*WebcastHourlyRankMessage_RankContainer_RankingData2) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{23, 0, 1}
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData2) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData2) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData2) GetRankdata() *Ranking {
	if x != nil {
		return x.Rankdata
	}
	return nil
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData2) GetData3() string {
	if x != nil {
		return x.Data3
	}
	return ""
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData2) GetData4() uint32 {
	if x != nil {
		return x.Data4
	}
	return 0
}

func (x *WebcastHourlyRankMessage_RankContainer_RankingData2) GetData5() uint32 {
	if x != nil {
		return x.Data5
	}
	return 0
}

type WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id2       uint64 `protobuf:"varint,1,opt,name=Id2,proto3" json:"Id2,omitempty"` // Same as Id2 in outer object (loser?)
	Timestamp uint64 `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Data3     uint32 `protobuf:"varint,3,opt,name=Data3,proto3" json:"Data3,omitempty"`
	Id1       uint64 `protobuf:"varint,4,opt,name=Id1,proto3" json:"Id1,omitempty"` // Same as Id1 in outer object (winner?)
	Data5     uint32 `protobuf:"varint,5,opt,name=Data5,proto3" json:"Data5,omitempty"`
	Data6     uint32 `protobuf:"varint,6,opt,name=Data6,proto3" json:"Data6,omitempty"`
	Data8     uint32 `protobuf:"varint,8,opt,name=Data8,proto3" json:"Data8,omitempty"`
}

func (x *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) Reset() {
	*x = WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) ProtoMessage() {}

func (x *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{25, 0}
}

func (x *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) GetId2() uint64 {
	if x != nil {
		return x.Id2
	}
	return 0
}

func (x *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) GetData3() uint32 {
	if x != nil {
		return x.Data3
	}
	return 0
}

func (x *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) GetId1() uint64 {
	if x != nil {
		return x.Id1
	}
	return 0
}

func (x *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) GetData5() uint32 {
	if x != nil {
		return x.Data5
	}
	return 0
}

func (x *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) GetData6() uint32 {
	if x != nil {
		return x.Data6
	}
	return 0
}

func (x *WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData) GetData8() uint32 {
	if x != nil {
		return x.Data8
	}
	return 0
}

type WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1 *WebcastLinkmicBattleTaskMessage_BattleTaskData `protobuf:"bytes,1,opt,name=Data1,proto3" json:"Data1,omitempty"`
}

func (x *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData) Reset() {
	*x = WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData) ProtoMessage() {}

func (x *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData.ProtoReflect.Descriptor instead.
func (*WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{26, 0}
}

func (x *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData) GetData1() *WebcastLinkmicBattleTaskMessage_BattleTaskData {
	if x != nil {
		return x.Data1
	}
	return nil
}

type WebcastLinkmicBattleTaskMessage_BattleTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1 uint32 `protobuf:"varint,1,opt,name=Data1,proto3" json:"Data1,omitempty"`
}

func (x *WebcastLinkmicBattleTaskMessage_BattleTaskData) Reset() {
	*x = WebcastLinkmicBattleTaskMessage_BattleTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkmicBattleTaskMessage_BattleTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkmicBattleTaskMessage_BattleTaskData) ProtoMessage() {}

func (x *WebcastLinkmicBattleTaskMessage_BattleTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkmicBattleTaskMessage_BattleTaskData.ProtoReflect.Descriptor instead.
func (*WebcastLinkmicBattleTaskMessage_BattleTaskData) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{26, 1}
}

func (x *WebcastLinkmicBattleTaskMessage_BattleTaskData) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

type WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data1 uint32 `protobuf:"varint,1,opt,name=Data1,proto3" json:"Data1,omitempty"`
	Data2 uint32 `protobuf:"varint,2,opt,name=Data2,proto3" json:"Data2,omitempty"`
}

func (x *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2) Reset() {
	*x = WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2) ProtoMessage() {}

func (x *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2.ProtoReflect.Descriptor instead.
func (*WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{26, 2}
}

func (x *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

type WebcastLinkMicBattle_LinkMicBattleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id1       uint64 `protobuf:"varint,1,opt,name=id1,proto3" json:"id1,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data1     uint32 `protobuf:"varint,3,opt,name=data1,proto3" json:"data1,omitempty"`
	Id2       uint64 `protobuf:"varint,4,opt,name=id2,proto3" json:"id2,omitempty"`
	Data2     uint32 `protobuf:"varint,5,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *WebcastLinkMicBattle_LinkMicBattleConfig) Reset() {
	*x = WebcastLinkMicBattle_LinkMicBattleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicBattle_LinkMicBattleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicBattle_LinkMicBattleConfig) ProtoMessage() {}

func (x *WebcastLinkMicBattle_LinkMicBattleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicBattle_LinkMicBattleConfig.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicBattle_LinkMicBattleConfig) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{27, 0}
}

func (x *WebcastLinkMicBattle_LinkMicBattleConfig) GetId1() uint64 {
	if x != nil {
		return x.Id1
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleConfig) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleConfig) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleConfig) GetId2() uint64 {
	if x != nil {
		return x.Id2
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleConfig) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

type WebcastLinkMicBattle_LinkMicBattleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data1 uint32 `protobuf:"varint,2,opt,name=data1,proto3" json:"data1,omitempty"`
	Data2 uint32 `protobuf:"varint,3,opt,name=data2,proto3" json:"data2,omitempty"`
	Data3 uint32 `protobuf:"varint,5,opt,name=data3,proto3" json:"data3,omitempty"`
	Url   string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *WebcastLinkMicBattle_LinkMicBattleData) Reset() {
	*x = WebcastLinkMicBattle_LinkMicBattleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicBattle_LinkMicBattleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicBattle_LinkMicBattleData) ProtoMessage() {}

func (x *WebcastLinkMicBattle_LinkMicBattleData) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicBattle_LinkMicBattleData.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicBattle_LinkMicBattleData) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{27, 1}
}

func (x *WebcastLinkMicBattle_LinkMicBattleData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleData) GetData1() uint32 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleData) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleData) GetData3() uint32 {
	if x != nil {
		return x.Data3
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type WebcastLinkMicBattle_LinkMicBattleDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Details *WebcastLinkMicBattle_LinkMicBattleData `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *WebcastLinkMicBattle_LinkMicBattleDetails) Reset() {
	*x = WebcastLinkMicBattle_LinkMicBattleDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicBattle_LinkMicBattleDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicBattle_LinkMicBattleDetails) ProtoMessage() {}

func (x *WebcastLinkMicBattle_LinkMicBattleDetails) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicBattle_LinkMicBattleDetails.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicBattle_LinkMicBattleDetails) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{27, 2}
}

func (x *WebcastLinkMicBattle_LinkMicBattleDetails) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleDetails) GetDetails() *WebcastLinkMicBattle_LinkMicBattleData {
	if x != nil {
		return x.Details
	}
	return nil
}

type WebcastLinkMicBattle_LinkMicBattleTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Users []*User `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *WebcastLinkMicBattle_LinkMicBattleTeam) Reset() {
	*x = WebcastLinkMicBattle_LinkMicBattleTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicBattle_LinkMicBattleTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicBattle_LinkMicBattleTeam) ProtoMessage() {}

func (x *WebcastLinkMicBattle_LinkMicBattleTeam) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicBattle_LinkMicBattleTeam.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicBattle_LinkMicBattleTeam) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{27, 3}
}

func (x *WebcastLinkMicBattle_LinkMicBattleTeam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleTeam) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type WebcastLinkMicBattle_LinkMicBattleTeamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId uint64                                  `protobuf:"varint,1,opt,name=teamId,proto3" json:"teamId,omitempty"`
	Data   *WebcastLinkMicBattle_LinkMicBattleData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WebcastLinkMicBattle_LinkMicBattleTeamData) Reset() {
	*x = WebcastLinkMicBattle_LinkMicBattleTeamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastLinkMicBattle_LinkMicBattleTeamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastLinkMicBattle_LinkMicBattleTeamData) ProtoMessage() {}

func (x *WebcastLinkMicBattle_LinkMicBattleTeamData) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastLinkMicBattle_LinkMicBattleTeamData.ProtoReflect.Descriptor instead.
func (*WebcastLinkMicBattle_LinkMicBattleTeamData) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{27, 4}
}

func (x *WebcastLinkMicBattle_LinkMicBattleTeamData) GetTeamId() uint64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *WebcastLinkMicBattle_LinkMicBattleTeamData) GetData() *WebcastLinkMicBattle_LinkMicBattleData {
	if x != nil {
		return x.Data
	}
	return nil
}

type WebcastMsgDetectMessage_TimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientStartMs   int64 `protobuf:"varint,1,opt,name=clientStartMs,proto3" json:"clientStartMs,omitempty"`
	ApiRecvTimeMs   int64 `protobuf:"varint,2,opt,name=apiRecvTimeMs,proto3" json:"apiRecvTimeMs,omitempty"`
	ApiSendToGoimMs int64 `protobuf:"varint,3,opt,name=apiSendToGoimMs,proto3" json:"apiSendToGoimMs,omitempty"`
}

func (x *WebcastMsgDetectMessage_TimeInfo) Reset() {
	*x = WebcastMsgDetectMessage_TimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastMsgDetectMessage_TimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastMsgDetectMessage_TimeInfo) ProtoMessage() {}

func (x *WebcastMsgDetectMessage_TimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastMsgDetectMessage_TimeInfo.ProtoReflect.Descriptor instead.
func (*WebcastMsgDetectMessage_TimeInfo) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{32, 0}
}

func (x *WebcastMsgDetectMessage_TimeInfo) GetClientStartMs() int64 {
	if x != nil {
		return x.ClientStartMs
	}
	return 0
}

func (x *WebcastMsgDetectMessage_TimeInfo) GetApiRecvTimeMs() int64 {
	if x != nil {
		return x.ApiRecvTimeMs
	}
	return 0
}

func (x *WebcastMsgDetectMessage_TimeInfo) GetApiSendToGoimMs() int64 {
	if x != nil {
		return x.ApiSendToGoimMs
	}
	return 0
}

type WebcastMsgDetectMessage_TriggerCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UplinkDetectHttp      bool `protobuf:"varint,1,opt,name=uplinkDetectHttp,proto3" json:"uplinkDetectHttp,omitempty"`
	UplinkDetectWebSocket bool `protobuf:"varint,2,opt,name=uplinkDetectWebSocket,proto3" json:"uplinkDetectWebSocket,omitempty"`
	DetectP2PMsg          bool `protobuf:"varint,3,opt,name=detectP2PMsg,proto3" json:"detectP2PMsg,omitempty"`
	DetectRoomMsg         bool `protobuf:"varint,4,opt,name=detectRoomMsg,proto3" json:"detectRoomMsg,omitempty"`
	HttpOptimize          bool `protobuf:"varint,5,opt,name=httpOptimize,proto3" json:"httpOptimize,omitempty"`
}

func (x *WebcastMsgDetectMessage_TriggerCondition) Reset() {
	*x = WebcastMsgDetectMessage_TriggerCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastMsgDetectMessage_TriggerCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastMsgDetectMessage_TriggerCondition) ProtoMessage() {}

func (x *WebcastMsgDetectMessage_TriggerCondition) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastMsgDetectMessage_TriggerCondition.ProtoReflect.Descriptor instead.
func (*WebcastMsgDetectMessage_TriggerCondition) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{32, 1}
}

func (x *WebcastMsgDetectMessage_TriggerCondition) GetUplinkDetectHttp() bool {
	if x != nil {
		return x.UplinkDetectHttp
	}
	return false
}

func (x *WebcastMsgDetectMessage_TriggerCondition) GetUplinkDetectWebSocket() bool {
	if x != nil {
		return x.UplinkDetectWebSocket
	}
	return false
}

func (x *WebcastMsgDetectMessage_TriggerCondition) GetDetectP2PMsg() bool {
	if x != nil {
		return x.DetectP2PMsg
	}
	return false
}

func (x *WebcastMsgDetectMessage_TriggerCondition) GetDetectRoomMsg() bool {
	if x != nil {
		return x.DetectRoomMsg
	}
	return false
}

func (x *WebcastMsgDetectMessage_TriggerCondition) GetHttpOptimize() bool {
	if x != nil {
		return x.HttpOptimize
	}
	return false
}

type WebcastOecLiveShoppingMessage_LiveShoppingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	PriceString string `protobuf:"bytes,2,opt,name=priceString,proto3" json:"priceString,omitempty"` // $55.99
	ImageUrl    string `protobuf:"bytes,3,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	ShopUrl     string `protobuf:"bytes,4,opt,name=shopUrl,proto3" json:"shopUrl,omitempty"`
	Data1       uint64 `protobuf:"varint,6,opt,name=data1,proto3" json:"data1,omitempty"`
	ShopName    string `protobuf:"bytes,7,opt,name=shopName,proto3" json:"shopName,omitempty"` // "Shopify"
	Data2       uint64 `protobuf:"varint,8,opt,name=data2,proto3" json:"data2,omitempty"`
	ShopUrl2    string `protobuf:"bytes,9,opt,name=shopUrl2,proto3" json:"shopUrl2,omitempty"`
	Data3       uint64 `protobuf:"varint,10,opt,name=data3,proto3" json:"data3,omitempty"`
	Data4       uint64 `protobuf:"varint,11,opt,name=data4,proto3" json:"data4,omitempty"`
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) Reset() {
	*x = WebcastOecLiveShoppingMessage_LiveShoppingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastOecLiveShoppingMessage_LiveShoppingData) ProtoMessage() {}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastOecLiveShoppingMessage_LiveShoppingData.ProtoReflect.Descriptor instead.
func (*WebcastOecLiveShoppingMessage_LiveShoppingData) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{33, 0}
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) GetPriceString() string {
	if x != nil {
		return x.PriceString
	}
	return ""
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) GetShopUrl() string {
	if x != nil {
		return x.ShopUrl
	}
	return ""
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) GetData1() uint64 {
	if x != nil {
		return x.Data1
	}
	return 0
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) GetData2() uint64 {
	if x != nil {
		return x.Data2
	}
	return 0
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) GetShopUrl2() string {
	if x != nil {
		return x.ShopUrl2
	}
	return ""
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) GetData3() uint64 {
	if x != nil {
		return x.Data3
	}
	return 0
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingData) GetData4() uint64 {
	if x != nil {
		return x.Data4
	}
	return 0
}

type WebcastOecLiveShoppingMessage_LiveShoppingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id1       string      `protobuf:"bytes,1,opt,name=id1,proto3" json:"id1,omitempty"`
	Data1     string      `protobuf:"bytes,3,opt,name=data1,proto3" json:"data1,omitempty"`
	Data2     uint32      `protobuf:"varint,4,opt,name=data2,proto3" json:"data2,omitempty"`
	Timestamp uint64      `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      *ValueLabel `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingDetails) Reset() {
	*x = WebcastOecLiveShoppingMessage_LiveShoppingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcast_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebcastOecLiveShoppingMessage_LiveShoppingDetails) ProtoMessage() {}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_webcast_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebcastOecLiveShoppingMessage_LiveShoppingDetails.ProtoReflect.Descriptor instead.
func (*WebcastOecLiveShoppingMessage_LiveShoppingDetails) Descriptor() ([]byte, []int) {
	return file_webcast_proto_rawDescGZIP(), []int{33, 1}
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingDetails) GetId1() string {
	if x != nil {
		return x.Id1
	}
	return ""
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingDetails) GetData1() string {
	if x != nil {
		return x.Data1
	}
	return ""
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingDetails) GetData2() uint32 {
	if x != nil {
		return x.Data2
	}
	return 0
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingDetails) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WebcastOecLiveShoppingMessage_LiveShoppingDetails) GetData() *ValueLabel {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_webcast_proto protoreflect.FileDescriptor

var file_webcast_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x77, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x1a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x02, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x75, 0x73, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x65,
	0x71, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x53, 0x65, 0x71, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x75, 0x73, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x82, 0x06, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f,
	0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x70,
	0x12, 0x2c, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x41, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x41, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75,
	0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x75, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x4d, 0x6f, 0x72, 0x65, 0x1a, 0x41,
	0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xa1, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x82, 0x09, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73,
	0x74, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x66,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x67, 0x69, 0x66, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x67, 0x69, 0x66, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x72, 0x6f, 0x6f, 0x6d, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x6f, 0x6f,
	0x6d, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x04, 0x67, 0x69, 0x66, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x47, 0x69, 0x66, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x67, 0x69, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x47,
	0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x69, 0x65,
	0x76, 0x65, 0x72, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x65, 0x76, 0x65, 0x72, 0x1a, 0x4a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x47, 0x69, 0x66,
	0x74, 0x52, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x82, 0x01, 0x0a, 0x0e, 0x47, 0x69, 0x66, 0x74, 0x49, 0x4d, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x6c, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x66, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x72, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0xf4, 0x01, 0x0a, 0x0b, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x4c, 0x61, 0x6e, 0x64,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x6f, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
	0x65, 0x22, 0x5b, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc6,
	0x0b, 0x0a, 0x15, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x07,
	0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x64, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x72, 0x72, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x64, 0x0a, 0x0e, 0x66, 0x61, 0x6e, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73,
	0x74, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6e, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x70, 0x0a, 0x12, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x42, 0x61, 0x72, 0x72, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x69,
	0x66, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0xa4, 0x01, 0x0a, 0x19,
	0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x1a, 0x8c, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x6e, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x1a, 0x6f, 0x0a, 0x1d, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x69, 0x66, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x47, 0x69,
	0x66, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x47, 0x69, 0x66, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x2c, 0x0a, 0x0c, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x84, 0x02, 0x0a, 0x0b, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x43, 0x4f, 0x4d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x43, 0x4f, 0x4d, 0x42, 0x55, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x56, 0x49, 0x45, 0x57, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x47, 0x49, 0x46, 0x54, 0x10,
	0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x41, 0x44, 0x45, 0x55, 0x53, 0x45, 0x52, 0x45,
	0x4e, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x4e, 0x53, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x46,
	0x41, 0x4e, 0x53, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45,
	0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x0c, 0x22, 0xf3, 0x01, 0x0a, 0x15, 0x57, 0x65, 0x62, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x0b,
	0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3d,
	0x0a, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xfc, 0x07,
	0x0a, 0x12, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x75,
	0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x11,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56,
	0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x11, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x32, 0x12, 0x30,
	0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x06, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x6d, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x71, 0x75, 0x69,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x6d, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57,
	0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x1a, 0x47, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x0e, 0x45, 0x6d,
	0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x45, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0x89, 0x06, 0x0a,
	0x15, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f,
	0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x49, 0x0a, 0x16, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x16,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x1a, 0xe0, 0x02, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x27, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x0f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x0b, 0x67, 0x6f, 0x74, 0x49, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x67, 0x6f, 0x74, 0x49, 0x74, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x0f, 0x62, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x17, 0x57, 0x65, 0x62,
	0x63, 0x61, 0x73, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x52,
	0x09, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x6d, 0x73,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4d, 0x73, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f,
	0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0xee, 0x05, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63,
	0x61, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x1a, 0x98, 0x04, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x63, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65,
	0x6f, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x70,
	0x61, 0x63, 0x6b, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x6e, 0x70,
	0x61, 0x63, 0x6b, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0x92, 0x04, 0x0a, 0x18, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x61, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x47, 0x6f, 0x61,
	0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x69, 0x66, 0x74, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x67, 0x69, 0x66, 0x74, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x75, 0x6e, 0x70, 0x69, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73,
	0x74, 0x49, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x1a, 0x57, 0x65, 0x62, 0x63, 0x61,
	0x73, 0x74, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x63, 0x61,
	0x73, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xec, 0x03,
	0x0a, 0x19, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x74,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x71, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x73, 0x65, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x1a, 0x74, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xb2, 0x02, 0x0a,
	0x14, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x9e, 0x03, 0x0a, 0x17, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x75, 0x62, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x40, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4f, 0x0a, 0x12, 0x6f, 0x6c, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4f, 0x6c, 0x64, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x6f, 0x6c,
	0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4c, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x22, 0xa9, 0x07, 0x0a, 0x18, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x70, 0x46, 0x6f, 0x72, 0x4f,
	0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x70, 0x46, 0x6f, 0x72, 0x4f, 0x66, 0x66, 0x1a, 0x94, 0x01,
	0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x79, 0x6e, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x79, 0x6e, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x87, 0x03, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x39, 0x0a,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77,
	0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x6f, 0x6e, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x6f, 0x6e, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x92,
	0x0b, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x73, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0c, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62,
	0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f,
	0x70, 0x53, 0x74, 0x72, 0x12, 0x5c, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65,
	0x62, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x40, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x56, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x56, 0x32, 0x12, 0x3f, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xdb, 0x02, 0x0a, 0x0c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x73,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x66, 0x6c, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x66,
	0x6c, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xfc, 0x02, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x22, 0xad, 0x02, 0x0a, 0x19, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62,
	0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a,
	0x90, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x31, 0x22, 0xdb, 0x02, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x78, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x78, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x78,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x78, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x47, 0x65, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x65, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x75, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xa9, 0x06, 0x0a, 0x18, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72,
	0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x48, 0x6f,
	0x75, 0x72, 0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1a, 0x80, 0x05, 0x0a, 0x0d, 0x52, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x31, 0x12, 0x61, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f,
	0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72,
	0x6c, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x0c,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x32, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x1a, 0x6b,
	0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x31, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x61, 0x6e,
	0x6b, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x1a, 0xae, 0x01, 0x0a, 0x0c,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x32, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x35, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x35, 0x22, 0xa4, 0x03, 0x0a,
	0x14, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x41,
	0x72, 0x6d, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x41, 0x72, 0x6d,
	0x69, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x31, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x12, 0x28, 0x0a,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x35, 0x22, 0xc6, 0x03, 0x0a, 0x20, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x49, 0x64, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x49,
	0x64, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x49, 0x64, 0x32, 0x12, 0x61, 0x0a,
	0x05, 0x44, 0x61, 0x74, 0x61, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61,
	0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x36,
	0x1a, 0xb9, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x49, 0x64, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x64, 0x31, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x49, 0x64, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x61,
	0x74, 0x61, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x35,
	0x12, 0x14, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x44, 0x61, 0x74, 0x61, 0x36, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x38, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x38, 0x22, 0xf3, 0x03, 0x0a,
	0x1f, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x44, 0x61, 0x74, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x61,
	0x74, 0x61, 0x32, 0x12, 0x58, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x33, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x33, 0x12, 0x59, 0x0a,
	0x05, 0x44, 0x61, 0x74, 0x61, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61,
	0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x6d,
	0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x32, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x35, 0x1a, 0x6a, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b,
	0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x51, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57,
	0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x44,
	0x61, 0x74, 0x61, 0x31, 0x1a, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x31, 0x1a, 0x44, 0x0a, 0x16,
	0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x31, 0x12, 0x14, 0x0a, 0x05,
	0x44, 0x61, 0x74, 0x61, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44, 0x61, 0x74,
	0x61, 0x32, 0x22, 0xc3, 0x08, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62,
	0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x31, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x31, 0x12, 0x4b, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x32, 0x12, 0x53, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d,
	0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x83, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x64, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x1a, 0x77, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x75, 0x0a, 0x14, 0x4c, 0x69, 0x6e,
	0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x4d, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x1a, 0x4c, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x78,
	0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63,
	0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x57, 0x65, 0x62,
	0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x46, 0x61, 0x6e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x13, 0x46, 0x61, 0x6e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x46,
	0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x22, 0xd3, 0x03, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b,
	0x6d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4d,
	0x69, 0x63, 0x46, 0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x69, 0x63, 0x46,
	0x61, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x22, 0xc7, 0x02, 0x0a, 0x17, 0x57, 0x65, 0x62,
	0x63, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x20, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0e,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f,
	0x68, 0x61, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x22, 0xba, 0x05, 0x0a, 0x17, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74,
	0x4d, 0x73, 0x67, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a,
	0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a, 0x80, 0x01, 0x0a, 0x08, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x70, 0x69, 0x52, 0x65, 0x63, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x52, 0x65, 0x63, 0x76, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x47,
	0x6f, 0x69, 0x6d, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x47, 0x6f, 0x69, 0x6d, 0x4d, 0x73, 0x1a, 0xe2, 0x01, 0x0a,
	0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x48, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x48, 0x74, 0x74, 0x70, 0x12, 0x34, 0x0a,
	0x15, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x57, 0x65, 0x62,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x32, 0x50,
	0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x50, 0x32, 0x50, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x68, 0x74, 0x74, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x22, 0x8c, 0x06, 0x0a, 0x1d, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x65, 0x63,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x57, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x65,
	0x63, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x58, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x65, 0x63, 0x4c, 0x69, 0x76, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x90, 0x02, 0x0a,
	0x10, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x55, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x55,
	0x72, 0x6c, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x55,
	0x72, 0x6c, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x34, 0x1a,
	0x9e, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xb2, 0x01, 0x0a, 0x15, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x50, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5d, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xfb, 0x0f, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x46,
	0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x0c, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x4b, 0x69,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f,
	0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f,
	0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x67, 0x0a, 0x18, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x18,
	0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x4d, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x4d,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f,
	0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x67, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x4d, 0x69,
	0x63, 0x49, 0x64, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4d, 0x69, 0x63, 0x49,
	0x64, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x13, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x17, 0x43, 0x6f, 0x68, 0x6f,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x17, 0x43, 0x6f, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x62, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x53, 0x79, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x53, 0x79, 0x73, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x6d, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x29, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x22, 0xbc, 0x0c, 0x0a, 0x17, 0x57, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x55, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x6b, 0x69, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4b, 0x69,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6b, 0x69,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x12,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a,
	0x13, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x69, 0x6b,
	0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x47, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x6a, 0x6f, 0x69,
	0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6a, 0x6f, 0x69, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x73, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x11,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x58,
	0x0a, 0x15, 0x70, 0x32, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x32, 0x50, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x15, 0x70, 0x32, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xb0, 0x01, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x13, 0x5a, 0x11, 0x53, 0x75, 0x6e, 0x6e, 0x79, 0x2f, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_webcast_proto_rawDescOnce sync.Once
	file_webcast_proto_rawDescData = file_webcast_proto_rawDesc
)

func file_webcast_proto_rawDescGZIP() []byte {
	file_webcast_proto_rawDescOnce.Do(func() {
		file_webcast_proto_rawDescData = protoimpl.X.CompressGZIP(file_webcast_proto_rawDescData)
	})
	return file_webcast_proto_rawDescData
}

var file_webcast_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_webcast_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_webcast_proto_goTypes = []interface{}{
	(WebcastBarrageMessage_BarrageType)(0),                      // 0: tiktok_hack.WebcastBarrageMessage.BarrageType
	(*WebcastPushFrame)(nil),                                    // 1: tiktok_hack.WebcastPushFrame
	(*WebcastResponse)(nil),                                     // 2: tiktok_hack.WebcastResponse
	(*WebcastGiftMessage)(nil),                                  // 3: tiktok_hack.WebcastGiftMessage
	(*RoomMessage)(nil),                                         // 4: tiktok_hack.RoomMessage
	(*WebcastRoomMessage)(nil),                                  // 5: tiktok_hack.WebcastRoomMessage
	(*WebcastBarrageMessage)(nil),                               // 6: tiktok_hack.WebcastBarrageMessage
	(*WebcastCaptionMessage)(nil),                               // 7: tiktok_hack.WebcastCaptionMessage
	(*WebcastChatMessage)(nil),                                  // 8: tiktok_hack.WebcastChatMessage
	(*WebcastControlMessage)(nil),                               // 9: tiktok_hack.WebcastControlMessage
	(*WebcastEmoteChatMessage)(nil),                             // 10: tiktok_hack.WebcastEmoteChatMessage
	(*WebcastEnvelopeMessage)(nil),                              // 11: tiktok_hack.WebcastEnvelopeMessage
	(*WebcastGoalUpdateMessage)(nil),                            // 12: tiktok_hack.WebcastGoalUpdateMessage
	(*WebcastImDeleteMessage)(nil),                              // 13: tiktok_hack.WebcastImDeleteMessage
	(*WebcastInRoomBannerMessage)(nil),                          // 14: tiktok_hack.WebcastInRoomBannerMessage
	(*WebcastLikeMessage)(nil),                                  // 15: tiktok_hack.WebcastLikeMessage
	(*WebcastRoomUserSeqMessage)(nil),                           // 16: tiktok_hack.WebcastRoomUserSeqMessage
	(*WebcastSocialMessage)(nil),                                // 17: tiktok_hack.WebcastSocialMessage
	(*WebcastSubNotifyMessage)(nil),                             // 18: tiktok_hack.WebcastSubNotifyMessage
	(*WebcastRankUpdateMessage)(nil),                            // 19: tiktok_hack.WebcastRankUpdateMessage
	(*WebcastMemberMessage)(nil),                                // 20: tiktok_hack.WebcastMemberMessage
	(*WebcastPollMessage)(nil),                                  // 21: tiktok_hack.WebcastPollMessage
	(*WebcastQuestionNewMessage)(nil),                           // 22: tiktok_hack.WebcastQuestionNewMessage
	(*WebcastRankTextMessage)(nil),                              // 23: tiktok_hack.WebcastRankTextMessage
	(*WebcastHourlyRankMessage)(nil),                            // 24: tiktok_hack.WebcastHourlyRankMessage
	(*WebcastLinkMicArmies)(nil),                                // 25: tiktok_hack.WebcastLinkMicArmies
	(*WebcastLinkMicBattlePunishFinish)(nil),                    // 26: tiktok_hack.WebcastLinkMicBattlePunishFinish
	(*WebcastLinkmicBattleTaskMessage)(nil),                     // 27: tiktok_hack.WebcastLinkmicBattleTaskMessage
	(*WebcastLinkMicBattle)(nil),                                // 28: tiktok_hack.WebcastLinkMicBattle
	(*WebcastLinkMicFanTicketMethod)(nil),                       // 29: tiktok_hack.WebcastLinkMicFanTicketMethod
	(*WebcastLinkMicMethod)(nil),                                // 30: tiktok_hack.WebcastLinkMicMethod
	(*WebcastLiveIntroMessage)(nil),                             // 31: tiktok_hack.WebcastLiveIntroMessage
	(*WebcastUnauthorizedMemberMessage)(nil),                    // 32: tiktok_hack.WebcastUnauthorizedMemberMessage
	(*WebcastMsgDetectMessage)(nil),                             // 33: tiktok_hack.WebcastMsgDetectMessage
	(*WebcastOecLiveShoppingMessage)(nil),                       // 34: tiktok_hack.WebcastOecLiveShoppingMessage
	(*WebcastRoomPinMessage)(nil),                               // 35: tiktok_hack.WebcastRoomPinMessage
	(*WebcastSystemMessage)(nil),                                // 36: tiktok_hack.WebcastSystemMessage
	(*WebcastLinkMessage)(nil),                                  // 37: tiktok_hack.WebcastLinkMessage
	(*WebcastLinkLayerMessage)(nil),                             // 38: tiktok_hack.WebcastLinkLayerMessage
	(*RoomVerifyMessage)(nil),                                   // 39: tiktok_hack.RoomVerifyMessage
	nil,                                                         // 40: tiktok_hack.WebcastPushFrame.HeadersEntry
	nil,                                                         // 41: tiktok_hack.WebcastResponse.RouteParamsMapEntry
	(*WebcastResponse_Message)(nil),                             // 42: tiktok_hack.WebcastResponse.Message
	(*WebcastGiftMessage_UserGiftReciever)(nil),                 // 43: tiktok_hack.WebcastGiftMessage.UserGiftReciever
	(*WebcastGiftMessage_GiftIMPriority)(nil),                   // 44: tiktok_hack.WebcastGiftMessage.GiftIMPriority
	(*WebcastGiftMessage_PublicAreaCommon)(nil),                 // 45: tiktok_hack.WebcastGiftMessage.PublicAreaCommon
	(*WebcastBarrageMessage_BarrageTypeUserGradeParam)(nil),     // 46: tiktok_hack.WebcastBarrageMessage.BarrageTypeUserGradeParam
	(*WebcastBarrageMessage_BarrageTypeFansLevelParam)(nil),     // 47: tiktok_hack.WebcastBarrageMessage.BarrageTypeFansLevelParam
	(*WebcastBarrageMessage_BarrageTypeSubscribeGiftParam)(nil), // 48: tiktok_hack.WebcastBarrageMessage.BarrageTypeSubscribeGiftParam
	(*WebcastBarrageMessage_BarrageEvent)(nil),                  // 49: tiktok_hack.WebcastBarrageMessage.BarrageEvent
	(*WebcastCaptionMessage_CaptionData)(nil),                   // 50: tiktok_hack.WebcastCaptionMessage.CaptionData
	nil, // 51: tiktok_hack.WebcastChatMessage.CommentQualityScoresEntry
	(*WebcastChatMessage_EmoteWithIndex)(nil),                              // 52: tiktok_hack.WebcastChatMessage.EmoteWithIndex
	(*WebcastControlMessage_Extra)(nil),                                    // 53: tiktok_hack.WebcastControlMessage.Extra
	(*WebcastEnvelopeMessage_EnvelopeInfo)(nil),                            // 54: tiktok_hack.WebcastEnvelopeMessage.EnvelopeInfo
	(*WebcastRoomUserSeqMessage_Contributor)(nil),                          // 55: tiktok_hack.WebcastRoomUserSeqMessage.Contributor
	(*WebcastRankUpdateMessage_RankTabInfo)(nil),                           // 56: tiktok_hack.WebcastRankUpdateMessage.RankTabInfo
	(*WebcastRankUpdateMessage_RankUpdate)(nil),                            // 57: tiktok_hack.WebcastRankUpdateMessage.RankUpdate
	(*WebcastMemberMessage_EffectConfig)(nil),                              // 58: tiktok_hack.WebcastMemberMessage.EffectConfig
	(*WebcastQuestionNewMessage_QuestionDetails)(nil),                      // 59: tiktok_hack.WebcastQuestionNewMessage.QuestionDetails
	(*WebcastHourlyRankMessage_RankContainer)(nil),                         // 60: tiktok_hack.WebcastHourlyRankMessage.RankContainer
	(*WebcastHourlyRankMessage_RankContainer_RankingData)(nil),             // 61: tiktok_hack.WebcastHourlyRankMessage.RankContainer.RankingData
	(*WebcastHourlyRankMessage_RankContainer_RankingData2)(nil),            // 62: tiktok_hack.WebcastHourlyRankMessage.RankContainer.RankingData2
	(*WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData)(nil), // 63: tiktok_hack.WebcastLinkMicBattlePunishFinish.LinkMicBattlePunishFinishData
	(*WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData)(nil),          // 64: tiktok_hack.WebcastLinkmicBattleTaskMessage.LinkmicBattleTaskData
	(*WebcastLinkmicBattleTaskMessage_BattleTaskData)(nil),                 // 65: tiktok_hack.WebcastLinkmicBattleTaskMessage.BattleTaskData
	(*WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2)(nil),         // 66: tiktok_hack.WebcastLinkmicBattleTaskMessage.LinkmicBattleTaskData2
	(*WebcastLinkMicBattle_LinkMicBattleConfig)(nil),                       // 67: tiktok_hack.WebcastLinkMicBattle.LinkMicBattleConfig
	(*WebcastLinkMicBattle_LinkMicBattleData)(nil),                         // 68: tiktok_hack.WebcastLinkMicBattle.LinkMicBattleData
	(*WebcastLinkMicBattle_LinkMicBattleDetails)(nil),                      // 69: tiktok_hack.WebcastLinkMicBattle.LinkMicBattleDetails
	(*WebcastLinkMicBattle_LinkMicBattleTeam)(nil),                         // 70: tiktok_hack.WebcastLinkMicBattle.LinkMicBattleTeam
	(*WebcastLinkMicBattle_LinkMicBattleTeamData)(nil),                     // 71: tiktok_hack.WebcastLinkMicBattle.LinkMicBattleTeamData
	(*WebcastMsgDetectMessage_TimeInfo)(nil),                               // 72: tiktok_hack.WebcastMsgDetectMessage.TimeInfo
	(*WebcastMsgDetectMessage_TriggerCondition)(nil),                       // 73: tiktok_hack.WebcastMsgDetectMessage.TriggerCondition
	(*WebcastOecLiveShoppingMessage_LiveShoppingData)(nil),                 // 74: tiktok_hack.WebcastOecLiveShoppingMessage.LiveShoppingData
	(*WebcastOecLiveShoppingMessage_LiveShoppingDetails)(nil),              // 75: tiktok_hack.WebcastOecLiveShoppingMessage.LiveShoppingDetails
	(*Common)(nil),                         // 76: tiktok_hack.Common
	(*User)(nil),                           // 77: tiktok_hack.User
	(*GiftStruct)(nil),                     // 78: tiktok_hack.GiftStruct
	(*UserIdentity)(nil),                   // 79: tiktok_hack.UserIdentity
	(*Image)(nil),                          // 80: tiktok_hack.Image
	(*Text)(nil),                           // 81: tiktok_hack.Text
	(ControlAction)(0),                     // 82: tiktok_hack.ControlAction
	(*PunishEventInfo)(nil),                // 83: tiktok_hack.PunishEventInfo
	(*Emote)(nil),                          // 84: tiktok_hack.Emote
	(*MsgFilter)(nil),                      // 85: tiktok_hack.MsgFilter
	(EnvelopeDisplay)(0),                   // 86: tiktok_hack.EnvelopeDisplay
	(*Indicator)(nil),                      // 87: tiktok_hack.Indicator
	(*Goal)(nil),                           // 88: tiktok_hack.Goal
	(SubscribeType)(0),                     // 89: tiktok_hack.SubscribeType
	(OldSubscribeStatus)(0),                // 90: tiktok_hack.OldSubscribeStatus
	(SubscribingStatus)(0),                 // 91: tiktok_hack.SubscribingStatus
	(MemberMessageAction)(0),               // 92: tiktok_hack.MemberMessageAction
	(MessageType)(0),                       // 93: tiktok_hack.MessageType
	(*PollStartContent)(nil),               // 94: tiktok_hack.PollStartContent
	(*PollEndContent)(nil),                 // 95: tiktok_hack.PollEndContent
	(*PollUpdateVotesContent)(nil),         // 96: tiktok_hack.PollUpdateVotesContent
	(*LinkMicArmiesItems)(nil),             // 97: tiktok_hack.LinkMicArmiesItems
	(*FanTicketRoomNoticeContent)(nil),     // 98: tiktok_hack.FanTicketRoomNoticeContent
	(AuditStatus)(0),                       // 99: tiktok_hack.AuditStatus
	(*BadgeStruct)(nil),                    // 100: tiktok_hack.BadgeStruct
	(*TimeStampContainer)(nil),             // 101: tiktok_hack.TimeStampContainer
	(LinkMessageType)(0),                   // 102: tiktok_hack.LinkMessageType
	(Scene)(0),                             // 103: tiktok_hack.Scene
	(*LinkerInviteContent)(nil),            // 104: tiktok_hack.LinkerInviteContent
	(*LinkerReplyContent)(nil),             // 105: tiktok_hack.LinkerReplyContent
	(*LinkerCreateContent)(nil),            // 106: tiktok_hack.LinkerCreateContent
	(*LinkerCloseContent)(nil),             // 107: tiktok_hack.LinkerCloseContent
	(*LinkerEnterContent)(nil),             // 108: tiktok_hack.LinkerEnterContent
	(*LinkerLeaveContent)(nil),             // 109: tiktok_hack.LinkerLeaveContent
	(*LinkerCancelContent)(nil),            // 110: tiktok_hack.LinkerCancelContent
	(*LinkerKickOutContent)(nil),           // 111: tiktok_hack.LinkerKickOutContent
	(*LinkerLinkedListChangeContent)(nil),  // 112: tiktok_hack.LinkerLinkedListChangeContent
	(*LinkerUpdateUserContent)(nil),        // 113: tiktok_hack.LinkerUpdateUserContent
	(*LinkerWaitingListChangeContent)(nil), // 114: tiktok_hack.LinkerWaitingListChangeContent
	(*LinkerMuteContent)(nil),              // 115: tiktok_hack.LinkerMuteContent
	(*LinkerRandomMatchContent)(nil),       // 116: tiktok_hack.LinkerRandomMatchContent
	(*LinkerUpdateUserSettingContent)(nil), // 117: tiktok_hack.LinkerUpdateUserSettingContent
	(*LinkerMicIdxUpdateContent)(nil),      // 118: tiktok_hack.LinkerMicIdxUpdateContent
	(*LinkerListChangeContent)(nil),        // 119: tiktok_hack.LinkerListChangeContent
	(*CohostListChangeContent)(nil),        // 120: tiktok_hack.CohostListChangeContent
	(*LinkerMediaChangeContent)(nil),       // 121: tiktok_hack.LinkerMediaChangeContent
	(*LinkerAcceptNoticeContent)(nil),      // 122: tiktok_hack.LinkerAcceptNoticeContent
	(*LinkerSysKickOutContent)(nil),        // 123: tiktok_hack.LinkerSysKickOutContent
	(*LinkmicUserToastContent)(nil),        // 124: tiktok_hack.LinkmicUserToastContent
	(*CreateChannelContent)(nil),           // 125: tiktok_hack.CreateChannelContent
	(*ListChangeContent)(nil),              // 126: tiktok_hack.ListChangeContent
	(*InviteContent)(nil),                  // 127: tiktok_hack.InviteContent
	(*ApplyContent)(nil),                   // 128: tiktok_hack.ApplyContent
	(*PermitApplyContent)(nil),             // 129: tiktok_hack.PermitApplyContent
	(*ReplyInviteContent)(nil),             // 130: tiktok_hack.ReplyInviteContent
	(*KickOutContent)(nil),                 // 131: tiktok_hack.KickOutContent
	(*CancelApplyContent)(nil),             // 132: tiktok_hack.CancelApplyContent
	(*CancelInviteContent)(nil),            // 133: tiktok_hack.CancelInviteContent
	(*LeaveContent)(nil),                   // 134: tiktok_hack.LeaveContent
	(*FinishChannelContent)(nil),           // 135: tiktok_hack.FinishChannelContent
	(*JoinDirectContent)(nil),              // 136: tiktok_hack.JoinDirectContent
	(*JoinGroupContent)(nil),               // 137: tiktok_hack.JoinGroupContent
	(*PermitJoinGroupContent)(nil),         // 138: tiktok_hack.PermitJoinGroupContent
	(*CancelJoinGroupContent)(nil),         // 139: tiktok_hack.CancelJoinGroupContent
	(*LeaveJoinGroupContent)(nil),          // 140: tiktok_hack.LeaveJoinGroupContent
	(*P2PGroupChangeContent)(nil),          // 141: tiktok_hack.P2PGroupChangeContent
	(*BusinessContent)(nil),                // 142: tiktok_hack.BusinessContent
	(EnvelopeBusinessType)(0),              // 143: tiktok_hack.EnvelopeBusinessType
	(EnvelopeFollowShowStatus)(0),          // 144: tiktok_hack.EnvelopeFollowShowStatus
	(*Ranking)(nil),                        // 145: tiktok_hack.Ranking
	(*ValueLabel)(nil),                     // 146: tiktok_hack.ValueLabel
}
var file_webcast_proto_depIdxs = []int32{
	40,  // 0: tiktok_hack.WebcastPushFrame.headers:type_name -> tiktok_hack.WebcastPushFrame.HeadersEntry
	42,  // 1: tiktok_hack.WebcastResponse.messages:type_name -> tiktok_hack.WebcastResponse.Message
	41,  // 2: tiktok_hack.WebcastResponse.routeParamsMap:type_name -> tiktok_hack.WebcastResponse.RouteParamsMapEntry
	76,  // 3: tiktok_hack.WebcastGiftMessage.common:type_name -> tiktok_hack.Common
	77,  // 4: tiktok_hack.WebcastGiftMessage.user:type_name -> tiktok_hack.User
	77,  // 5: tiktok_hack.WebcastGiftMessage.toUser:type_name -> tiktok_hack.User
	78,  // 6: tiktok_hack.WebcastGiftMessage.gift:type_name -> tiktok_hack.GiftStruct
	79,  // 7: tiktok_hack.WebcastGiftMessage.userIdentity:type_name -> tiktok_hack.UserIdentity
	43,  // 8: tiktok_hack.WebcastGiftMessage.userGiftReciever:type_name -> tiktok_hack.WebcastGiftMessage.UserGiftReciever
	76,  // 9: tiktok_hack.RoomMessage.common:type_name -> tiktok_hack.Common
	80,  // 10: tiktok_hack.RoomMessage.icon:type_name -> tiktok_hack.Image
	76,  // 11: tiktok_hack.WebcastRoomMessage.common:type_name -> tiktok_hack.Common
	76,  // 12: tiktok_hack.WebcastBarrageMessage.common:type_name -> tiktok_hack.Common
	49,  // 13: tiktok_hack.WebcastBarrageMessage.event:type_name -> tiktok_hack.WebcastBarrageMessage.BarrageEvent
	0,   // 14: tiktok_hack.WebcastBarrageMessage.msgType:type_name -> tiktok_hack.WebcastBarrageMessage.BarrageType
	80,  // 15: tiktok_hack.WebcastBarrageMessage.icon:type_name -> tiktok_hack.Image
	81,  // 16: tiktok_hack.WebcastBarrageMessage.content:type_name -> tiktok_hack.Text
	80,  // 17: tiktok_hack.WebcastBarrageMessage.background:type_name -> tiktok_hack.Image
	80,  // 18: tiktok_hack.WebcastBarrageMessage.rightIcon:type_name -> tiktok_hack.Image
	46,  // 19: tiktok_hack.WebcastBarrageMessage.userGradeParam:type_name -> tiktok_hack.WebcastBarrageMessage.BarrageTypeUserGradeParam
	47,  // 20: tiktok_hack.WebcastBarrageMessage.fansLevelParam:type_name -> tiktok_hack.WebcastBarrageMessage.BarrageTypeFansLevelParam
	48,  // 21: tiktok_hack.WebcastBarrageMessage.subscribeGiftParam:type_name -> tiktok_hack.WebcastBarrageMessage.BarrageTypeSubscribeGiftParam
	76,  // 22: tiktok_hack.WebcastCaptionMessage.common:type_name -> tiktok_hack.Common
	50,  // 23: tiktok_hack.WebcastCaptionMessage.captionData:type_name -> tiktok_hack.WebcastCaptionMessage.CaptionData
	76,  // 24: tiktok_hack.WebcastChatMessage.common:type_name -> tiktok_hack.Common
	77,  // 25: tiktok_hack.WebcastChatMessage.user:type_name -> tiktok_hack.User
	80,  // 26: tiktok_hack.WebcastChatMessage.backgroundImage:type_name -> tiktok_hack.Image
	80,  // 27: tiktok_hack.WebcastChatMessage.backgroundImageV2:type_name -> tiktok_hack.Image
	80,  // 28: tiktok_hack.WebcastChatMessage.giftImage:type_name -> tiktok_hack.Image
	77,  // 29: tiktok_hack.WebcastChatMessage.atUser:type_name -> tiktok_hack.User
	52,  // 30: tiktok_hack.WebcastChatMessage.emotesList:type_name -> tiktok_hack.WebcastChatMessage.EmoteWithIndex
	79,  // 31: tiktok_hack.WebcastChatMessage.UserIdentity:type_name -> tiktok_hack.UserIdentity
	51,  // 32: tiktok_hack.WebcastChatMessage.CommentQualityScores:type_name -> tiktok_hack.WebcastChatMessage.CommentQualityScoresEntry
	76,  // 33: tiktok_hack.WebcastControlMessage.common:type_name -> tiktok_hack.Common
	82,  // 34: tiktok_hack.WebcastControlMessage.action:type_name -> tiktok_hack.ControlAction
	53,  // 35: tiktok_hack.WebcastControlMessage.extra:type_name -> tiktok_hack.WebcastControlMessage.Extra
	81,  // 36: tiktok_hack.WebcastControlMessage.perceptionAudienceText:type_name -> tiktok_hack.Text
	83,  // 37: tiktok_hack.WebcastControlMessage.punishInfo:type_name -> tiktok_hack.PunishEventInfo
	81,  // 38: tiktok_hack.WebcastControlMessage.floatText:type_name -> tiktok_hack.Text
	76,  // 39: tiktok_hack.WebcastEmoteChatMessage.common:type_name -> tiktok_hack.Common
	77,  // 40: tiktok_hack.WebcastEmoteChatMessage.user:type_name -> tiktok_hack.User
	84,  // 41: tiktok_hack.WebcastEmoteChatMessage.emoteList:type_name -> tiktok_hack.Emote
	85,  // 42: tiktok_hack.WebcastEmoteChatMessage.msgFilter:type_name -> tiktok_hack.MsgFilter
	79,  // 43: tiktok_hack.WebcastEmoteChatMessage.userIdentity:type_name -> tiktok_hack.UserIdentity
	76,  // 44: tiktok_hack.WebcastEnvelopeMessage.common:type_name -> tiktok_hack.Common
	54,  // 45: tiktok_hack.WebcastEnvelopeMessage.envelopeInfo:type_name -> tiktok_hack.WebcastEnvelopeMessage.EnvelopeInfo
	86,  // 46: tiktok_hack.WebcastEnvelopeMessage.display:type_name -> tiktok_hack.EnvelopeDisplay
	76,  // 47: tiktok_hack.WebcastGoalUpdateMessage.common:type_name -> tiktok_hack.Common
	87,  // 48: tiktok_hack.WebcastGoalUpdateMessage.indicator:type_name -> tiktok_hack.Indicator
	88,  // 49: tiktok_hack.WebcastGoalUpdateMessage.goal:type_name -> tiktok_hack.Goal
	80,  // 50: tiktok_hack.WebcastGoalUpdateMessage.contributorAvatar:type_name -> tiktok_hack.Image
	76,  // 51: tiktok_hack.WebcastImDeleteMessage.common:type_name -> tiktok_hack.Common
	76,  // 52: tiktok_hack.WebcastInRoomBannerMessage.header:type_name -> tiktok_hack.Common
	76,  // 53: tiktok_hack.WebcastLikeMessage.common:type_name -> tiktok_hack.Common
	77,  // 54: tiktok_hack.WebcastLikeMessage.user:type_name -> tiktok_hack.User
	76,  // 55: tiktok_hack.WebcastRoomUserSeqMessage.common:type_name -> tiktok_hack.Common
	55,  // 56: tiktok_hack.WebcastRoomUserSeqMessage.ranksList:type_name -> tiktok_hack.WebcastRoomUserSeqMessage.Contributor
	55,  // 57: tiktok_hack.WebcastRoomUserSeqMessage.seatsList:type_name -> tiktok_hack.WebcastRoomUserSeqMessage.Contributor
	76,  // 58: tiktok_hack.WebcastSocialMessage.common:type_name -> tiktok_hack.Common
	77,  // 59: tiktok_hack.WebcastSocialMessage.user:type_name -> tiktok_hack.User
	76,  // 60: tiktok_hack.WebcastSubNotifyMessage.common:type_name -> tiktok_hack.Common
	77,  // 61: tiktok_hack.WebcastSubNotifyMessage.user:type_name -> tiktok_hack.User
	89,  // 62: tiktok_hack.WebcastSubNotifyMessage.subscribeType:type_name -> tiktok_hack.SubscribeType
	90,  // 63: tiktok_hack.WebcastSubNotifyMessage.oldSubscribeStatus:type_name -> tiktok_hack.OldSubscribeStatus
	91,  // 64: tiktok_hack.WebcastSubNotifyMessage.subscribingStatus:type_name -> tiktok_hack.SubscribingStatus
	76,  // 65: tiktok_hack.WebcastRankUpdateMessage.common:type_name -> tiktok_hack.Common
	57,  // 66: tiktok_hack.WebcastRankUpdateMessage.updatesList:type_name -> tiktok_hack.WebcastRankUpdateMessage.RankUpdate
	56,  // 67: tiktok_hack.WebcastRankUpdateMessage.tabsList:type_name -> tiktok_hack.WebcastRankUpdateMessage.RankTabInfo
	76,  // 68: tiktok_hack.WebcastMemberMessage.common:type_name -> tiktok_hack.Common
	77,  // 69: tiktok_hack.WebcastMemberMessage.user:type_name -> tiktok_hack.User
	77,  // 70: tiktok_hack.WebcastMemberMessage.operator:type_name -> tiktok_hack.User
	92,  // 71: tiktok_hack.WebcastMemberMessage.action:type_name -> tiktok_hack.MemberMessageAction
	58,  // 72: tiktok_hack.WebcastMemberMessage.effectConfig:type_name -> tiktok_hack.WebcastMemberMessage.EffectConfig
	58,  // 73: tiktok_hack.WebcastMemberMessage.enterEffectConfig:type_name -> tiktok_hack.WebcastMemberMessage.EffectConfig
	80,  // 74: tiktok_hack.WebcastMemberMessage.backgroundImage:type_name -> tiktok_hack.Image
	80,  // 75: tiktok_hack.WebcastMemberMessage.backgroundImageV2:type_name -> tiktok_hack.Image
	81,  // 76: tiktok_hack.WebcastMemberMessage.anchorDisplayText:type_name -> tiktok_hack.Text
	76,  // 77: tiktok_hack.WebcastPollMessage.common:type_name -> tiktok_hack.Common
	93,  // 78: tiktok_hack.WebcastPollMessage.messageType:type_name -> tiktok_hack.MessageType
	94,  // 79: tiktok_hack.WebcastPollMessage.startContent:type_name -> tiktok_hack.PollStartContent
	95,  // 80: tiktok_hack.WebcastPollMessage.endContent:type_name -> tiktok_hack.PollEndContent
	96,  // 81: tiktok_hack.WebcastPollMessage.updateContent:type_name -> tiktok_hack.PollUpdateVotesContent
	76,  // 82: tiktok_hack.WebcastQuestionNewMessage.common:type_name -> tiktok_hack.Common
	59,  // 83: tiktok_hack.WebcastQuestionNewMessage.details:type_name -> tiktok_hack.WebcastQuestionNewMessage.QuestionDetails
	76,  // 84: tiktok_hack.WebcastRankTextMessage.common:type_name -> tiktok_hack.Common
	81,  // 85: tiktok_hack.WebcastRankTextMessage.selfGetBadgeMsg:type_name -> tiktok_hack.Text
	81,  // 86: tiktok_hack.WebcastRankTextMessage.otherGetBadgeMsg:type_name -> tiktok_hack.Text
	76,  // 87: tiktok_hack.WebcastHourlyRankMessage.common:type_name -> tiktok_hack.Common
	60,  // 88: tiktok_hack.WebcastHourlyRankMessage.data:type_name -> tiktok_hack.WebcastHourlyRankMessage.RankContainer
	76,  // 89: tiktok_hack.WebcastLinkMicArmies.common:type_name -> tiktok_hack.Common
	97,  // 90: tiktok_hack.WebcastLinkMicArmies.battleItems:type_name -> tiktok_hack.LinkMicArmiesItems
	80,  // 91: tiktok_hack.WebcastLinkMicArmies.Image:type_name -> tiktok_hack.Image
	76,  // 92: tiktok_hack.WebcastLinkMicBattlePunishFinish.Header:type_name -> tiktok_hack.Common
	63,  // 93: tiktok_hack.WebcastLinkMicBattlePunishFinish.Data6:type_name -> tiktok_hack.WebcastLinkMicBattlePunishFinish.LinkMicBattlePunishFinishData
	76,  // 94: tiktok_hack.WebcastLinkmicBattleTaskMessage.Header:type_name -> tiktok_hack.Common
	64,  // 95: tiktok_hack.WebcastLinkmicBattleTaskMessage.Data3:type_name -> tiktok_hack.WebcastLinkmicBattleTaskMessage.LinkmicBattleTaskData
	66,  // 96: tiktok_hack.WebcastLinkmicBattleTaskMessage.Data5:type_name -> tiktok_hack.WebcastLinkmicBattleTaskMessage.LinkmicBattleTaskData2
	76,  // 97: tiktok_hack.WebcastLinkMicBattle.common:type_name -> tiktok_hack.Common
	67,  // 98: tiktok_hack.WebcastLinkMicBattle.battleConfig:type_name -> tiktok_hack.WebcastLinkMicBattle.LinkMicBattleConfig
	69,  // 99: tiktok_hack.WebcastLinkMicBattle.details:type_name -> tiktok_hack.WebcastLinkMicBattle.LinkMicBattleDetails
	70,  // 100: tiktok_hack.WebcastLinkMicBattle.teams1:type_name -> tiktok_hack.WebcastLinkMicBattle.LinkMicBattleTeam
	70,  // 101: tiktok_hack.WebcastLinkMicBattle.teams2:type_name -> tiktok_hack.WebcastLinkMicBattle.LinkMicBattleTeam
	71,  // 102: tiktok_hack.WebcastLinkMicBattle.teamData:type_name -> tiktok_hack.WebcastLinkMicBattle.LinkMicBattleTeamData
	76,  // 103: tiktok_hack.WebcastLinkMicFanTicketMethod.common:type_name -> tiktok_hack.Common
	98,  // 104: tiktok_hack.WebcastLinkMicFanTicketMethod.FanTicketRoomNotice:type_name -> tiktok_hack.FanTicketRoomNoticeContent
	76,  // 105: tiktok_hack.WebcastLinkMicMethod.common:type_name -> tiktok_hack.Common
	93,  // 106: tiktok_hack.WebcastLinkMicMethod.messageType:type_name -> tiktok_hack.MessageType
	76,  // 107: tiktok_hack.WebcastLiveIntroMessage.common:type_name -> tiktok_hack.Common
	99,  // 108: tiktok_hack.WebcastLiveIntroMessage.auditStatus:type_name -> tiktok_hack.AuditStatus
	77,  // 109: tiktok_hack.WebcastLiveIntroMessage.host:type_name -> tiktok_hack.User
	100, // 110: tiktok_hack.WebcastLiveIntroMessage.badges:type_name -> tiktok_hack.BadgeStruct
	76,  // 111: tiktok_hack.WebcastUnauthorizedMemberMessage.common:type_name -> tiktok_hack.Common
	81,  // 112: tiktok_hack.WebcastUnauthorizedMemberMessage.nickNamePrefix:type_name -> tiktok_hack.Text
	81,  // 113: tiktok_hack.WebcastUnauthorizedMemberMessage.enterText:type_name -> tiktok_hack.Text
	76,  // 114: tiktok_hack.WebcastMsgDetectMessage.common:type_name -> tiktok_hack.Common
	73,  // 115: tiktok_hack.WebcastMsgDetectMessage.triggerCondition:type_name -> tiktok_hack.WebcastMsgDetectMessage.TriggerCondition
	72,  // 116: tiktok_hack.WebcastMsgDetectMessage.timeInfo:type_name -> tiktok_hack.WebcastMsgDetectMessage.TimeInfo
	76,  // 117: tiktok_hack.WebcastOecLiveShoppingMessage.common:type_name -> tiktok_hack.Common
	74,  // 118: tiktok_hack.WebcastOecLiveShoppingMessage.shopData:type_name -> tiktok_hack.WebcastOecLiveShoppingMessage.LiveShoppingData
	101, // 119: tiktok_hack.WebcastOecLiveShoppingMessage.shopTimings:type_name -> tiktok_hack.TimeStampContainer
	75,  // 120: tiktok_hack.WebcastOecLiveShoppingMessage.details:type_name -> tiktok_hack.WebcastOecLiveShoppingMessage.LiveShoppingDetails
	76,  // 121: tiktok_hack.WebcastRoomPinMessage.common:type_name -> tiktok_hack.Common
	76,  // 122: tiktok_hack.WebcastSystemMessage.common:type_name -> tiktok_hack.Common
	76,  // 123: tiktok_hack.WebcastLinkMessage.common:type_name -> tiktok_hack.Common
	102, // 124: tiktok_hack.WebcastLinkMessage.MessageType:type_name -> tiktok_hack.LinkMessageType
	103, // 125: tiktok_hack.WebcastLinkMessage.Scene:type_name -> tiktok_hack.Scene
	104, // 126: tiktok_hack.WebcastLinkMessage.InviteContent:type_name -> tiktok_hack.LinkerInviteContent
	105, // 127: tiktok_hack.WebcastLinkMessage.ReplyContent:type_name -> tiktok_hack.LinkerReplyContent
	106, // 128: tiktok_hack.WebcastLinkMessage.CreateContent:type_name -> tiktok_hack.LinkerCreateContent
	107, // 129: tiktok_hack.WebcastLinkMessage.CloseContent:type_name -> tiktok_hack.LinkerCloseContent
	108, // 130: tiktok_hack.WebcastLinkMessage.EnterContent:type_name -> tiktok_hack.LinkerEnterContent
	109, // 131: tiktok_hack.WebcastLinkMessage.LeaveContent:type_name -> tiktok_hack.LinkerLeaveContent
	110, // 132: tiktok_hack.WebcastLinkMessage.CancelContent:type_name -> tiktok_hack.LinkerCancelContent
	111, // 133: tiktok_hack.WebcastLinkMessage.KickOutContent:type_name -> tiktok_hack.LinkerKickOutContent
	112, // 134: tiktok_hack.WebcastLinkMessage.LinkedListChangeContent:type_name -> tiktok_hack.LinkerLinkedListChangeContent
	113, // 135: tiktok_hack.WebcastLinkMessage.UpdateUserContent:type_name -> tiktok_hack.LinkerUpdateUserContent
	114, // 136: tiktok_hack.WebcastLinkMessage.WaitingListChangeContent:type_name -> tiktok_hack.LinkerWaitingListChangeContent
	115, // 137: tiktok_hack.WebcastLinkMessage.MuteContent:type_name -> tiktok_hack.LinkerMuteContent
	116, // 138: tiktok_hack.WebcastLinkMessage.RandomMatchContent:type_name -> tiktok_hack.LinkerRandomMatchContent
	117, // 139: tiktok_hack.WebcastLinkMessage.UpdateUserSettingContent:type_name -> tiktok_hack.LinkerUpdateUserSettingContent
	118, // 140: tiktok_hack.WebcastLinkMessage.MicIdxUpdateContent:type_name -> tiktok_hack.LinkerMicIdxUpdateContent
	119, // 141: tiktok_hack.WebcastLinkMessage.ListChangeContent:type_name -> tiktok_hack.LinkerListChangeContent
	120, // 142: tiktok_hack.WebcastLinkMessage.CohostListChangeContent:type_name -> tiktok_hack.CohostListChangeContent
	121, // 143: tiktok_hack.WebcastLinkMessage.MediaChangeContent:type_name -> tiktok_hack.LinkerMediaChangeContent
	122, // 144: tiktok_hack.WebcastLinkMessage.ReplyAcceptNoticeContent:type_name -> tiktok_hack.LinkerAcceptNoticeContent
	123, // 145: tiktok_hack.WebcastLinkMessage.SysKickOutContent:type_name -> tiktok_hack.LinkerSysKickOutContent
	124, // 146: tiktok_hack.WebcastLinkMessage.UserToastContent:type_name -> tiktok_hack.LinkmicUserToastContent
	76,  // 147: tiktok_hack.WebcastLinkLayerMessage.common:type_name -> tiktok_hack.Common
	93,  // 148: tiktok_hack.WebcastLinkLayerMessage.messageType:type_name -> tiktok_hack.MessageType
	103, // 149: tiktok_hack.WebcastLinkLayerMessage.scene:type_name -> tiktok_hack.Scene
	125, // 150: tiktok_hack.WebcastLinkLayerMessage.createChannelContent:type_name -> tiktok_hack.CreateChannelContent
	126, // 151: tiktok_hack.WebcastLinkLayerMessage.listChangeContent:type_name -> tiktok_hack.ListChangeContent
	127, // 152: tiktok_hack.WebcastLinkLayerMessage.inviteContent:type_name -> tiktok_hack.InviteContent
	128, // 153: tiktok_hack.WebcastLinkLayerMessage.applyContent:type_name -> tiktok_hack.ApplyContent
	129, // 154: tiktok_hack.WebcastLinkLayerMessage.permitApplyContent:type_name -> tiktok_hack.PermitApplyContent
	130, // 155: tiktok_hack.WebcastLinkLayerMessage.replyInviteContent:type_name -> tiktok_hack.ReplyInviteContent
	131, // 156: tiktok_hack.WebcastLinkLayerMessage.kickOutContent:type_name -> tiktok_hack.KickOutContent
	132, // 157: tiktok_hack.WebcastLinkLayerMessage.cancelApplyContent:type_name -> tiktok_hack.CancelApplyContent
	133, // 158: tiktok_hack.WebcastLinkLayerMessage.cancelInviteContent:type_name -> tiktok_hack.CancelInviteContent
	134, // 159: tiktok_hack.WebcastLinkLayerMessage.leaveContent:type_name -> tiktok_hack.LeaveContent
	135, // 160: tiktok_hack.WebcastLinkLayerMessage.finishContent:type_name -> tiktok_hack.FinishChannelContent
	136, // 161: tiktok_hack.WebcastLinkLayerMessage.joinDirectContent:type_name -> tiktok_hack.JoinDirectContent
	137, // 162: tiktok_hack.WebcastLinkLayerMessage.joinGroupContent:type_name -> tiktok_hack.JoinGroupContent
	138, // 163: tiktok_hack.WebcastLinkLayerMessage.permitGroupContent:type_name -> tiktok_hack.PermitJoinGroupContent
	139, // 164: tiktok_hack.WebcastLinkLayerMessage.cancelGroupContent:type_name -> tiktok_hack.CancelJoinGroupContent
	140, // 165: tiktok_hack.WebcastLinkLayerMessage.leaveGroupContent:type_name -> tiktok_hack.LeaveJoinGroupContent
	141, // 166: tiktok_hack.WebcastLinkLayerMessage.p2pGroupChangeContent:type_name -> tiktok_hack.P2PGroupChangeContent
	142, // 167: tiktok_hack.WebcastLinkLayerMessage.businessContent:type_name -> tiktok_hack.BusinessContent
	76,  // 168: tiktok_hack.RoomVerifyMessage.common:type_name -> tiktok_hack.Common
	80,  // 169: tiktok_hack.WebcastGiftMessage.PublicAreaCommon.userLabel:type_name -> tiktok_hack.Image
	77,  // 170: tiktok_hack.WebcastBarrageMessage.BarrageTypeUserGradeParam.user:type_name -> tiktok_hack.User
	77,  // 171: tiktok_hack.WebcastBarrageMessage.BarrageTypeFansLevelParam.user:type_name -> tiktok_hack.User
	84,  // 172: tiktok_hack.WebcastChatMessage.EmoteWithIndex.emote:type_name -> tiktok_hack.Emote
	81,  // 173: tiktok_hack.WebcastControlMessage.Extra.title:type_name -> tiktok_hack.Text
	81,  // 174: tiktok_hack.WebcastControlMessage.Extra.violationReason:type_name -> tiktok_hack.Text
	81,  // 175: tiktok_hack.WebcastControlMessage.Extra.content:type_name -> tiktok_hack.Text
	81,  // 176: tiktok_hack.WebcastControlMessage.Extra.gotItButton:type_name -> tiktok_hack.Text
	81,  // 177: tiktok_hack.WebcastControlMessage.Extra.banDetailButton:type_name -> tiktok_hack.Text
	143, // 178: tiktok_hack.WebcastEnvelopeMessage.EnvelopeInfo.businessType:type_name -> tiktok_hack.EnvelopeBusinessType
	80,  // 179: tiktok_hack.WebcastEnvelopeMessage.EnvelopeInfo.sendUserAvatar:type_name -> tiktok_hack.Image
	144, // 180: tiktok_hack.WebcastEnvelopeMessage.EnvelopeInfo.followShowStatus:type_name -> tiktok_hack.EnvelopeFollowShowStatus
	77,  // 181: tiktok_hack.WebcastRoomUserSeqMessage.Contributor.user:type_name -> tiktok_hack.User
	81,  // 182: tiktok_hack.WebcastRankUpdateMessage.RankTabInfo.titleText:type_name -> tiktok_hack.Text
	81,  // 183: tiktok_hack.WebcastRankUpdateMessage.RankUpdate.defaultContent:type_name -> tiktok_hack.Text
	80,  // 184: tiktok_hack.WebcastMemberMessage.EffectConfig.icon:type_name -> tiktok_hack.Image
	81,  // 185: tiktok_hack.WebcastMemberMessage.EffectConfig.text:type_name -> tiktok_hack.Text
	80,  // 186: tiktok_hack.WebcastMemberMessage.EffectConfig.textIcon:type_name -> tiktok_hack.Image
	80,  // 187: tiktok_hack.WebcastMemberMessage.EffectConfig.badge:type_name -> tiktok_hack.Image
	77,  // 188: tiktok_hack.WebcastQuestionNewMessage.QuestionDetails.user:type_name -> tiktok_hack.User
	61,  // 189: tiktok_hack.WebcastHourlyRankMessage.RankContainer.rankingdata:type_name -> tiktok_hack.WebcastHourlyRankMessage.RankContainer.RankingData
	145, // 190: tiktok_hack.WebcastHourlyRankMessage.RankContainer.rankings:type_name -> tiktok_hack.Ranking
	62,  // 191: tiktok_hack.WebcastHourlyRankMessage.RankContainer.rankingdata2:type_name -> tiktok_hack.WebcastHourlyRankMessage.RankContainer.RankingData2
	145, // 192: tiktok_hack.WebcastHourlyRankMessage.RankContainer.RankingData.rankdata:type_name -> tiktok_hack.Ranking
	145, // 193: tiktok_hack.WebcastHourlyRankMessage.RankContainer.RankingData2.rankdata:type_name -> tiktok_hack.Ranking
	65,  // 194: tiktok_hack.WebcastLinkmicBattleTaskMessage.LinkmicBattleTaskData.Data1:type_name -> tiktok_hack.WebcastLinkmicBattleTaskMessage.BattleTaskData
	68,  // 195: tiktok_hack.WebcastLinkMicBattle.LinkMicBattleDetails.details:type_name -> tiktok_hack.WebcastLinkMicBattle.LinkMicBattleData
	77,  // 196: tiktok_hack.WebcastLinkMicBattle.LinkMicBattleTeam.users:type_name -> tiktok_hack.User
	68,  // 197: tiktok_hack.WebcastLinkMicBattle.LinkMicBattleTeamData.data:type_name -> tiktok_hack.WebcastLinkMicBattle.LinkMicBattleData
	146, // 198: tiktok_hack.WebcastOecLiveShoppingMessage.LiveShoppingDetails.data:type_name -> tiktok_hack.ValueLabel
	199, // [199:199] is the sub-list for method output_type
	199, // [199:199] is the sub-list for method input_type
	199, // [199:199] is the sub-list for extension type_name
	199, // [199:199] is the sub-list for extension extendee
	0,   // [0:199] is the sub-list for field type_name
}

func init() { file_webcast_proto_init() }
func file_webcast_proto_init() {
	if File_webcast_proto != nil {
		return
	}
	file_data_proto_init()
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_webcast_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastPushFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastGiftMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastRoomMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastBarrageMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastCaptionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastControlMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastEmoteChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastEnvelopeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastGoalUpdateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastImDeleteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastInRoomBannerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLikeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastRoomUserSeqMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastSocialMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastSubNotifyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastRankUpdateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastMemberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastPollMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastQuestionNewMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastRankTextMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastHourlyRankMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicArmies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicBattlePunishFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkmicBattleTaskMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicBattle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicFanTicketMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLiveIntroMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastUnauthorizedMemberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastMsgDetectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastOecLiveShoppingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastRoomPinMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastSystemMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkLayerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomVerifyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastResponse_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastGiftMessage_UserGiftReciever); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastGiftMessage_GiftIMPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastGiftMessage_PublicAreaCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastBarrageMessage_BarrageTypeUserGradeParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastBarrageMessage_BarrageTypeFansLevelParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastBarrageMessage_BarrageTypeSubscribeGiftParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastBarrageMessage_BarrageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastCaptionMessage_CaptionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastChatMessage_EmoteWithIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastControlMessage_Extra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastEnvelopeMessage_EnvelopeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastRoomUserSeqMessage_Contributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastRankUpdateMessage_RankTabInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastRankUpdateMessage_RankUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastMemberMessage_EffectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastQuestionNewMessage_QuestionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastHourlyRankMessage_RankContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastHourlyRankMessage_RankContainer_RankingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastHourlyRankMessage_RankContainer_RankingData2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicBattlePunishFinish_LinkMicBattlePunishFinishData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkmicBattleTaskMessage_BattleTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkmicBattleTaskMessage_LinkmicBattleTaskData2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicBattle_LinkMicBattleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicBattle_LinkMicBattleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicBattle_LinkMicBattleDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicBattle_LinkMicBattleTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastLinkMicBattle_LinkMicBattleTeamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastMsgDetectMessage_TimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastMsgDetectMessage_TriggerCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastOecLiveShoppingMessage_LiveShoppingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcast_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebcastOecLiveShoppingMessage_LiveShoppingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webcast_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_webcast_proto_goTypes,
		DependencyIndexes: file_webcast_proto_depIdxs,
		EnumInfos:         file_webcast_proto_enumTypes,
		MessageInfos:      file_webcast_proto_msgTypes,
	}.Build()
	File_webcast_proto = out.File
	file_webcast_proto_rawDesc = nil
	file_webcast_proto_goTypes = nil
	file_webcast_proto_depIdxs = nil
}
