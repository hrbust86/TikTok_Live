// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: im/ChatMessage.proto

package im

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	data "Sunny/tiktok_hack/generated/data"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 更新时间 : 2024-06-6
type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 通用信息，可能包含聊天消息的公共属性
	Common *Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// 用户信息，可能包含发送消息的用户信息
	User *data.User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// 消息内容，可能包含消息的文本内容
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// 对发送者可见，可能表示消息是否对发送者可见
	VisibleToSender bool `protobuf:"varint,4,opt,name=visible_to_sender,json=visibleToSender,proto3" json:"visible_to_sender,omitempty"`
	// 背景图像，可能包含消息背景的图像信息
	BackgroundImage *data.Image `protobuf:"bytes,5,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`
	// 全屏文本颜色，可能表示全屏消息文本的颜色
	FullScreenTextColor string `protobuf:"bytes,6,opt,name=full_screen_text_color,json=fullScreenTextColor,proto3" json:"full_screen_text_color,omitempty"`
	// 背景图像V2，可能包含新版本的消息背景图像信息
	BackgroundImageV2 *data.Image `protobuf:"bytes,7,opt,name=background_image_v2,json=backgroundImageV2,proto3" json:"background_image_v2,omitempty"`
	// 公共区域通用信息，可能包含公共聊天区域的通用属性
	PublicAreaCommon *PublicAreaCommon `protobuf:"bytes,9,opt,name=public_area_common,json=publicAreaCommon,proto3" json:"public_area_common,omitempty"`
	// 礼物图像，可能包含礼物消息的图像信息
	GiftImage *data.Image `protobuf:"bytes,10,opt,name=gift_image,json=giftImage,proto3" json:"gift_image,omitempty"`
	// 输入类型，可能表示输入或发送消息的方式
	InputType int32 `protobuf:"varint,11,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`
	// @用户信息，可能包含被@的用户信息
	AtUser *data.User `protobuf:"bytes,12,opt,name=at_user,json=atUser,proto3" json:"at_user,omitempty"`
	// 表情与索引，可能包含消息中的表情及其索引
	Emotes []*EmoteWithIndex `protobuf:"bytes,13,rep,name=emotes,proto3" json:"emotes,omitempty"`
	// 内容语言，可能表示消息内容的语言
	ContentLanguage string `protobuf:"bytes,14,opt,name=content_language,json=contentLanguage,proto3" json:"content_language,omitempty"`
	// 消息过滤器，可能包含消息过滤的规则或参数
	MsgFilter *data.MsgFilter `protobuf:"bytes,15,opt,name=msg_filter,json=msgFilter,proto3" json:"msg_filter,omitempty"`
	// 快速聊天场景，可能表示快速聊天的特定场景
	QuickChatScene int32 `protobuf:"varint,16,opt,name=quick_chat_scene,json=quickChatScene,proto3" json:"quick_chat_scene,omitempty"`
	// 社区标记状态，可能表示消息在社区中的标记或举报状态
	CommunityFlaggedStatus int32 `protobuf:"varint,17,opt,name=community_flagged_status,json=communityFlaggedStatus,proto3" json:"community_flagged_status,omitempty"`
	// 用户身份，可能包含用户的身份信息
	UserIdentity *data.UserIdentity `protobuf:"bytes,18,opt,name=user_identity,json=userIdentity,proto3" json:"user_identity,omitempty"`
	// 评论质量评分，可能包含消息的评分或反馈
	CommentQualityScores []*CommentQualityScore `protobuf:"bytes,19,rep,name=comment_quality_scores,json=commentQualityScores,proto3" json:"comment_quality_scores,omitempty"`
	// 评论标签，可能包含消息的标签或分类
	CommentTag []int32 `protobuf:"varint,20,rep,packed,name=comment_tag,json=commentTag,proto3" json:"comment_tag,omitempty"`
	// 公共区域消息通用信息，可能包含公共聊天消息的通用属性
	PublicAreaMessageCommon *PublicAreaMessageCommon `protobuf:"bytes,21,opt,name=public_area_message_common,json=publicAreaMessageCommon,proto3" json:"public_area_message_common,omitempty"`
	// 屏幕时间，可能表示消息在屏幕上显示的时间
	ScreenTime int64 `protobuf:"varint,22,opt,name=screen_time,json=screenTime,proto3" json:"screen_time,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_ChatMessage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_im_ChatMessage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_im_ChatMessage_proto_rawDescGZIP(), []int{0}
}

func (x *ChatMessage) GetCommon() *Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ChatMessage) GetUser() *data.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatMessage) GetVisibleToSender() bool {
	if x != nil {
		return x.VisibleToSender
	}
	return false
}

func (x *ChatMessage) GetBackgroundImage() *data.Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *ChatMessage) GetFullScreenTextColor() string {
	if x != nil {
		return x.FullScreenTextColor
	}
	return ""
}

func (x *ChatMessage) GetBackgroundImageV2() *data.Image {
	if x != nil {
		return x.BackgroundImageV2
	}
	return nil
}

func (x *ChatMessage) GetPublicAreaCommon() *PublicAreaCommon {
	if x != nil {
		return x.PublicAreaCommon
	}
	return nil
}

func (x *ChatMessage) GetGiftImage() *data.Image {
	if x != nil {
		return x.GiftImage
	}
	return nil
}

func (x *ChatMessage) GetInputType() int32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *ChatMessage) GetAtUser() *data.User {
	if x != nil {
		return x.AtUser
	}
	return nil
}

func (x *ChatMessage) GetEmotes() []*EmoteWithIndex {
	if x != nil {
		return x.Emotes
	}
	return nil
}

func (x *ChatMessage) GetContentLanguage() string {
	if x != nil {
		return x.ContentLanguage
	}
	return ""
}

func (x *ChatMessage) GetMsgFilter() *data.MsgFilter {
	if x != nil {
		return x.MsgFilter
	}
	return nil
}

func (x *ChatMessage) GetQuickChatScene() int32 {
	if x != nil {
		return x.QuickChatScene
	}
	return 0
}

func (x *ChatMessage) GetCommunityFlaggedStatus() int32 {
	if x != nil {
		return x.CommunityFlaggedStatus
	}
	return 0
}

func (x *ChatMessage) GetUserIdentity() *data.UserIdentity {
	if x != nil {
		return x.UserIdentity
	}
	return nil
}

func (x *ChatMessage) GetCommentQualityScores() []*CommentQualityScore {
	if x != nil {
		return x.CommentQualityScores
	}
	return nil
}

func (x *ChatMessage) GetCommentTag() []int32 {
	if x != nil {
		return x.CommentTag
	}
	return nil
}

func (x *ChatMessage) GetPublicAreaMessageCommon() *PublicAreaMessageCommon {
	if x != nil {
		return x.PublicAreaMessageCommon
	}
	return nil
}

func (x *ChatMessage) GetScreenTime() int64 {
	if x != nil {
		return x.ScreenTime
	}
	return 0
}

type EmoteWithIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 索引，可能用于表示表情在列表中的位置或序号
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// 表情信息，可能包含表情的详细描述或引用
	Emote *data.Emote `protobuf:"bytes,2,opt,name=emote,proto3" json:"emote,omitempty"`
}

func (x *EmoteWithIndex) Reset() {
	*x = EmoteWithIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_ChatMessage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmoteWithIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmoteWithIndex) ProtoMessage() {}

func (x *EmoteWithIndex) ProtoReflect() protoreflect.Message {
	mi := &file_im_ChatMessage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmoteWithIndex.ProtoReflect.Descriptor instead.
func (*EmoteWithIndex) Descriptor() ([]byte, []int) {
	return file_im_ChatMessage_proto_rawDescGZIP(), []int{1}
}

func (x *EmoteWithIndex) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EmoteWithIndex) GetEmote() *data.Emote {
	if x != nil {
		return x.Emote
	}
	return nil
}

var File_im_ChatMessage_proto protoreflect.FileDescriptor

var file_im_ChatMessage_proto_rawDesc = []byte{
	0x0a, 0x14, 0x69, 0x6d, 0x2f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x1a, 0x0f, 0x69, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6d, 0x2f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x69, 0x6d, 0x2f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x69, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x08, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b,
	0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x75,
	0x6c, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x42, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x56, 0x32, 0x12, 0x4b, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f,
	0x68, 0x61, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x06, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x45,
	0x6d, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x06, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x73,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x46, 0x6c,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x14, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x67, 0x12, 0x61, 0x0a, 0x1a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x17,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x0e, 0x45, 0x6d, 0x6f, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x45, 0x6d,
	0x6f, 0x74, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x67, 0x0a, 0x43, 0x63, 0x6f,
	0x6f, 0x6c, 0x2e, 0x73, 0x63, 0x78, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x77, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x69,
	0x6d, 0x50, 0x01, 0x5a, 0x1e, 0x53, 0x75, 0x6e, 0x6e, 0x79, 0x2f, 0x74, 0x69, 0x6b, 0x74, 0x6f,
	0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x69, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_im_ChatMessage_proto_rawDescOnce sync.Once
	file_im_ChatMessage_proto_rawDescData = file_im_ChatMessage_proto_rawDesc
)

func file_im_ChatMessage_proto_rawDescGZIP() []byte {
	file_im_ChatMessage_proto_rawDescOnce.Do(func() {
		file_im_ChatMessage_proto_rawDescData = protoimpl.X.CompressGZIP(file_im_ChatMessage_proto_rawDescData)
	})
	return file_im_ChatMessage_proto_rawDescData
}

var file_im_ChatMessage_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_im_ChatMessage_proto_goTypes = []interface{}{
	(*ChatMessage)(nil),             // 0: tiktok_hack.ChatMessage
	(*EmoteWithIndex)(nil),          // 1: tiktok_hack.EmoteWithIndex
	(*Common)(nil),                  // 2: tiktok_hack.Common
	(*data.User)(nil),               // 3: tiktok_hack.User
	(*data.Image)(nil),              // 4: tiktok_hack.Image
	(*PublicAreaCommon)(nil),        // 5: tiktok_hack.PublicAreaCommon
	(*data.MsgFilter)(nil),          // 6: tiktok_hack.MsgFilter
	(*data.UserIdentity)(nil),       // 7: tiktok_hack.UserIdentity
	(*CommentQualityScore)(nil),     // 8: tiktok_hack.CommentQualityScore
	(*PublicAreaMessageCommon)(nil), // 9: tiktok_hack.PublicAreaMessageCommon
	(*data.Emote)(nil),              // 10: tiktok_hack.Emote
}
var file_im_ChatMessage_proto_depIdxs = []int32{
	2,  // 0: tiktok_hack.ChatMessage.common:type_name -> tiktok_hack.Common
	3,  // 1: tiktok_hack.ChatMessage.user:type_name -> tiktok_hack.User
	4,  // 2: tiktok_hack.ChatMessage.background_image:type_name -> tiktok_hack.Image
	4,  // 3: tiktok_hack.ChatMessage.background_image_v2:type_name -> tiktok_hack.Image
	5,  // 4: tiktok_hack.ChatMessage.public_area_common:type_name -> tiktok_hack.PublicAreaCommon
	4,  // 5: tiktok_hack.ChatMessage.gift_image:type_name -> tiktok_hack.Image
	3,  // 6: tiktok_hack.ChatMessage.at_user:type_name -> tiktok_hack.User
	1,  // 7: tiktok_hack.ChatMessage.emotes:type_name -> tiktok_hack.EmoteWithIndex
	6,  // 8: tiktok_hack.ChatMessage.msg_filter:type_name -> tiktok_hack.MsgFilter
	7,  // 9: tiktok_hack.ChatMessage.user_identity:type_name -> tiktok_hack.UserIdentity
	8,  // 10: tiktok_hack.ChatMessage.comment_quality_scores:type_name -> tiktok_hack.CommentQualityScore
	9,  // 11: tiktok_hack.ChatMessage.public_area_message_common:type_name -> tiktok_hack.PublicAreaMessageCommon
	10, // 12: tiktok_hack.EmoteWithIndex.emote:type_name -> tiktok_hack.Emote
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_im_ChatMessage_proto_init() }
func file_im_ChatMessage_proto_init() {
	if File_im_ChatMessage_proto != nil {
		return
	}
	file_im_Common_proto_init()
	file_im_PublicAreaCommon_proto_init()
	file_im_PublicAreaMessageCommon_proto_init()
	file_im_CommentQualityScore_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_im_ChatMessage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_im_ChatMessage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmoteWithIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_im_ChatMessage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_im_ChatMessage_proto_goTypes,
		DependencyIndexes: file_im_ChatMessage_proto_depIdxs,
		MessageInfos:      file_im_ChatMessage_proto_msgTypes,
	}.Build()
	File_im_ChatMessage_proto = out.File
	file_im_ChatMessage_proto_rawDesc = nil
	file_im_ChatMessage_proto_goTypes = nil
	file_im_ChatMessage_proto_depIdxs = nil
}
