// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: im/Common.proto

package im

import (
	data "Sunny/tiktok_hack/generated/data"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 更新时间 : 2024-06-6
type Common struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 方法名称，可能表示消息的处理方式或类型
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// 消息的唯一标识符
	MsgId int64 `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	// 房间或会话的唯一标识符
	RoomId int64 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 消息创建的时间（Unix 时间戳）
	CreateTime int64 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 监控用途的整数，具体含义根据实际业务确定
	Monitor int32 `protobuf:"varint,5,opt,name=monitor,proto3" json:"monitor,omitempty"`
	// 是否向用户展示此消息
	IsShowMsg bool `protobuf:"varint,6,opt,name=is_show_msg,json=isShowMsg,proto3" json:"is_show_msg,omitempty"`
	// 消息描述，可能包含消息内容的简短说明
	Describe string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
	// 展示文本，可能包含要展示给用户的消息文本
	DisplayText *data.Text `protobuf:"bytes,8,opt,name=display_text,json=displayText,proto3" json:"display_text,omitempty"`
	// 折叠类型，可能用于控制消息在 UI 中的展示方式
	FoldType int64 `protobuf:"varint,9,opt,name=fold_type,json=foldType,proto3" json:"fold_type,omitempty"`
	// 主播折叠类型，可能与主播相关的消息展示方式
	AnchorFoldType int64 `protobuf:"varint,10,opt,name=anchor_fold_type,json=anchorFoldType,proto3" json:"anchor_fold_type,omitempty"`
	// 消息优先级得分，可能用于确定消息展示的优先级
	PriorityScore int64 `protobuf:"varint,11,opt,name=priority_score,json=priorityScore,proto3" json:"priority_score,omitempty"`
	// 日志 ID，可能用于日志记录和消息追踪
	LogId string `protobuf:"bytes,12,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	// 消息处理过滤器键，可能用于消息的过滤逻辑
	MsgProcessFilterK string `protobuf:"bytes,13,opt,name=msg_process_filter_k,json=msgProcessFilterK,proto3" json:"msg_process_filter_k,omitempty"`
	// 消息处理过滤器值，与过滤器键一起使用
	MsgProcessFilterV string `protobuf:"bytes,14,opt,name=msg_process_filter_v,json=msgProcessFilterV,proto3" json:"msg_process_filter_v,omitempty"`
	// 消息来源 IDC，可能用于标识消息来源的数据中心
	FromIdc string `protobuf:"bytes,15,opt,name=from_idc,json=fromIdc,proto3" json:"from_idc,omitempty"`
	// 消息目标 IDC，可能用于标识消息发送到的数据中心
	ToIdc string `protobuf:"bytes,16,opt,name=to_idc,json=toIdc,proto3" json:"to_idc,omitempty"`
	// 过滤消息标签列表，可能用于消息分类或过滤
	FilterMsgTags []string `protobuf:"bytes,17,rep,name=filter_msg_tags,json=filterMsgTags,proto3" json:"filter_msg_tags,omitempty"`
	// 附加信息，可能包含额外的上下文信息或元数据
	Sei *data.LiveMessageSEI `protobuf:"bytes,18,opt,name=sei,proto3" json:"sei,omitempty"`
	// 依赖的根 ID，可能用于消息之间的依赖关系
	DependRootId *data.LiveMessageID `protobuf:"bytes,19,opt,name=depend_root_id,json=dependRootId,proto3" json:"depend_root_id,omitempty"`
	// 依赖 ID，可能用于消息之间的依赖关系
	DependId *data.LiveMessageID `protobuf:"bytes,20,opt,name=depend_id,json=dependId,proto3" json:"depend_id,omitempty"`
	// 主播优先级得分，可能与主播相关的消息优先级
	AnchorPriorityScore int64 `protobuf:"varint,21,opt,name=anchor_priority_score,json=anchorPriorityScore,proto3" json:"anchor_priority_score,omitempty"`
	// 房间消息热度等级，可能用于衡量消息的热度或重要性
	RoomMessageHeatLevel int64 `protobuf:"varint,22,opt,name=room_message_heat_level,json=roomMessageHeatLevel,proto3" json:"room_message_heat_level,omitempty"`
	// Web 端折叠类型，可能用于 Web 界面中的消息展示方式
	FoldTypeForWeb int64 `protobuf:"varint,23,opt,name=fold_type_for_web,json=foldTypeForWeb,proto3" json:"fold_type_for_web,omitempty"`
	// 主播 Web 端折叠类型，可能与主播相关在 Web 界面中的消息展示方式
	AnchorFoldTypeForWeb int64 `protobuf:"varint,24,opt,name=anchor_fold_type_for_web,json=anchorFoldTypeForWeb,proto3" json:"anchor_fold_type_for_web,omitempty"`
	// 客户端发送时间，可能记录客户端实际发送消息的时间
	ClientSendTime int64 `protobuf:"varint,25,opt,name=client_send_time,json=clientSendTime,proto3" json:"client_send_time,omitempty"`
	// 分发策略，可能用于控制消息如何被分发到不同的客户端或服务
	DispatchStrategy int32 `protobuf:"varint,26,opt,name=dispatch_strategy,json=dispatchStrategy,proto3" json:"dispatch_strategy,omitempty"`
}

func (x *Common) Reset() {
	*x = Common{}
	if protoimpl.UnsafeEnabled {
		mi := &file_im_Common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Common) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Common) ProtoMessage() {}

func (x *Common) ProtoReflect() protoreflect.Message {
	mi := &file_im_Common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Common.ProtoReflect.Descriptor instead.
func (*Common) Descriptor() ([]byte, []int) {
	return file_im_Common_proto_rawDescGZIP(), []int{0}
}

func (x *Common) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Common) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *Common) GetRoomId() int64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *Common) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Common) GetMonitor() int32 {
	if x != nil {
		return x.Monitor
	}
	return 0
}

func (x *Common) GetIsShowMsg() bool {
	if x != nil {
		return x.IsShowMsg
	}
	return false
}

func (x *Common) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *Common) GetDisplayText() *data.Text {
	if x != nil {
		return x.DisplayText
	}
	return nil
}

func (x *Common) GetFoldType() int64 {
	if x != nil {
		return x.FoldType
	}
	return 0
}

func (x *Common) GetAnchorFoldType() int64 {
	if x != nil {
		return x.AnchorFoldType
	}
	return 0
}

func (x *Common) GetPriorityScore() int64 {
	if x != nil {
		return x.PriorityScore
	}
	return 0
}

func (x *Common) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *Common) GetMsgProcessFilterK() string {
	if x != nil {
		return x.MsgProcessFilterK
	}
	return ""
}

func (x *Common) GetMsgProcessFilterV() string {
	if x != nil {
		return x.MsgProcessFilterV
	}
	return ""
}

func (x *Common) GetFromIdc() string {
	if x != nil {
		return x.FromIdc
	}
	return ""
}

func (x *Common) GetToIdc() string {
	if x != nil {
		return x.ToIdc
	}
	return ""
}

func (x *Common) GetFilterMsgTags() []string {
	if x != nil {
		return x.FilterMsgTags
	}
	return nil
}

func (x *Common) GetSei() *data.LiveMessageSEI {
	if x != nil {
		return x.Sei
	}
	return nil
}

func (x *Common) GetDependRootId() *data.LiveMessageID {
	if x != nil {
		return x.DependRootId
	}
	return nil
}

func (x *Common) GetDependId() *data.LiveMessageID {
	if x != nil {
		return x.DependId
	}
	return nil
}

func (x *Common) GetAnchorPriorityScore() int64 {
	if x != nil {
		return x.AnchorPriorityScore
	}
	return 0
}

func (x *Common) GetRoomMessageHeatLevel() int64 {
	if x != nil {
		return x.RoomMessageHeatLevel
	}
	return 0
}

func (x *Common) GetFoldTypeForWeb() int64 {
	if x != nil {
		return x.FoldTypeForWeb
	}
	return 0
}

func (x *Common) GetAnchorFoldTypeForWeb() int64 {
	if x != nil {
		return x.AnchorFoldTypeForWeb
	}
	return 0
}

func (x *Common) GetClientSendTime() int64 {
	if x != nil {
		return x.ClientSendTime
	}
	return 0
}

func (x *Common) GetDispatchStrategy() int32 {
	if x != nil {
		return x.DispatchStrategy
	}
	return 0
}

var File_im_Common_proto protoreflect.FileDescriptor

var file_im_Common_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x1a, 0x18,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x4c,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x45, 0x49, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x34,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61,
	0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6f, 0x6c, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x73, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x73,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x76, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x73, 0x67, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x63,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x49, 0x64, 0x63, 0x12, 0x26, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x73, 0x65, 0x69, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x45, 0x49, 0x52,
	0x03, 0x73, 0x65, 0x69, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x08, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x6f,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x6f, 0x72, 0x57, 0x65, 0x62, 0x12, 0x36, 0x0a, 0x18, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x77, 0x65,
	0x62, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x46,
	0x6f, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x57, 0x65, 0x62, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x42, 0x67, 0x0a, 0x43, 0x63, 0x6f, 0x6f, 0x6c, 0x2e, 0x73, 0x63, 0x78,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68,
	0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x77, 0x65, 0x62, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x69, 0x6d, 0x50, 0x01, 0x5a, 0x1e, 0x53,
	0x75, 0x6e, 0x6e, 0x79, 0x2f, 0x74, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x5f, 0x68, 0x61, 0x63, 0x6b,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x69, 0x6d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_im_Common_proto_rawDescOnce sync.Once
	file_im_Common_proto_rawDescData = file_im_Common_proto_rawDesc
)

func file_im_Common_proto_rawDescGZIP() []byte {
	file_im_Common_proto_rawDescOnce.Do(func() {
		file_im_Common_proto_rawDescData = protoimpl.X.CompressGZIP(file_im_Common_proto_rawDescData)
	})
	return file_im_Common_proto_rawDescData
}

var file_im_Common_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_im_Common_proto_goTypes = []interface{}{
	(*Common)(nil),              // 0: tiktok_hack.Common
	(*data.Text)(nil),           // 1: tiktok_hack.Text
	(*data.LiveMessageSEI)(nil), // 2: tiktok_hack.LiveMessageSEI
	(*data.LiveMessageID)(nil),  // 3: tiktok_hack.LiveMessageID
}
var file_im_Common_proto_depIdxs = []int32{
	1, // 0: tiktok_hack.Common.display_text:type_name -> tiktok_hack.Text
	2, // 1: tiktok_hack.Common.sei:type_name -> tiktok_hack.LiveMessageSEI
	3, // 2: tiktok_hack.Common.depend_root_id:type_name -> tiktok_hack.LiveMessageID
	3, // 3: tiktok_hack.Common.depend_id:type_name -> tiktok_hack.LiveMessageID
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_im_Common_proto_init() }
func file_im_Common_proto_init() {
	if File_im_Common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_im_Common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Common); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_im_Common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_im_Common_proto_goTypes,
		DependencyIndexes: file_im_Common_proto_depIdxs,
		MessageInfos:      file_im_Common_proto_msgTypes,
	}.Build()
	File_im_Common_proto = out.File
	file_im_Common_proto_rawDesc = nil
	file_im_Common_proto_goTypes = nil
	file_im_Common_proto_depIdxs = nil
}
